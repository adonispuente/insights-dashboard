---
$schema: /openshift/namespace-1.yml

labels: {}

name: openshift-logging
description: hst02ue1 openshift-logging namespace

cluster:
  $ref: /openshift/hst02ue1/cluster.yml

app:
  $ref: /services/app-sre/app.yml

environment:
  $ref: /products/app-sre/environments/stage.yml

managedExternalResources: true

externalResources:
- provider: aws
  provisioner:
    $ref: /aws/app-sre-rosa/account.yml
  resources:
  - provider: aws-iam-role
    identifier: logforwarder-hst02ue1
    assume_role:
      # this is the arn of the OIDC provider for hst02ue1 in the app-sre-rosa AWS account
      Federated: arn:aws:iam::366871242094:oidc-provider/rh-oidc.s3.us-east-1.amazonaws.com/23sgur2jboj5oidq4qrb72783mng8uog
    assume_action: "AssumeRoleWithWebIdentity"
    # the condition makes sure that only the logcollector service account in the openshift-logging namespace can assume this role
    assume_condition:
      StringEquals:
        "rh-oidc.s3.us-east-1.amazonaws.com/23sgur2jboj5oidq4qrb72783mng8uog:sub": "system:serviceaccount:openshift-logging:logcollector"
    # this policy allows us to assume the logingest-hst02ue1 role in the app-sre-logs account
    inline_policy:
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "sts:AssumeRole",
            "Resource": "arn:aws:iam::744086762512:role/logingest-hst02ue1"
          }
        ]
      }
    output_resource_name: logforwarder-iam-sts


- provider: aws
  provisioner:
    $ref: /aws/app-sre-logs/account.yml
  resources:
  # IAM service account used to ship logs to cloudwatch when not running in STS mode
  - provider: aws-iam-service-account
    identifier: log-forwarder-hst02ue1
    output_resource_name: app-sre-logs-cloudwatch-access
    user_policy: {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:GetLogEvents",
            "logs:PutRetentionPolicy",
            "logs:GetLogRecord"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:logs:*:*:*"}
      ]}
  # IAM role to assume by the service account "logcollector" when running in STS mode
  - provider: aws-iam-role
    identifier: logingest-hst02ue1
    assume_role:
      AWS:
      - arn:aws:sts::366871242094:assumed-role/logforwarder-hst02ue1/logcollector
    inline_policy:
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents",
              "logs:GetLogEvents",
              "logs:PutRetentionPolicy",
              "logs:GetLogRecord"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:logs:*:*:*"}
        ]
      }
    output_resource_name: cloudwatch-access-sts
    output_format:
      provider: generic-secret
      data:
        credentials: |
          [default]
          role_arn = {{ role_arn }}
          web_identity_token_file = /var/run/secrets/eks.amazonaws.com/serviceaccount/token


managedResourceTypes:
- Subscription.operators.coreos.com
- OperatorGroup.operators.coreos.com
- ClusterLogging.logging.openshift.io
- ClusterLogForwarder.logging.openshift.io

sharedResources:
- $ref: /services/app-sre/shared-resources/cluster-logging-operator.yaml
#- $ref: /services/app-sre/shared-resources/cluster-logging-config.yaml

openshiftResources:
- provider: resource
  path: /setup/cluster-logging/clusterlogging.yaml
- provider: resource-template
  type: jinja2
  path: /setup/cluster-logging/clusterlogforwarder.yaml.j2
  variables:
    AWS_SECRET_NAME: cloudwatch-sts-credentials
- provider: resource-template
  path: /setup/cluster-logging/cloudwatch-sts-credentials.secret.yaml.j2
