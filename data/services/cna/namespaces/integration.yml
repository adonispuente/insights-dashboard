$schema: /openshift/namespace-1.yml

labels:
  service: cna

name: cna-integration

description: Integration namespace for the CNA service

cluster:
  $ref: /openshift/appsres06ue1/cluster.yml

app:
  $ref: /services/cna/app.yml

environment:
  $ref: /products/cna/environments/integration.yml

managedRoles: true

managedResourceTypes:
- Role.rbac.authorization.k8s.io
- RoleBinding.rbac.authorization.k8s.io
- NetworkPolicy
- Secret

sharedResources:
- $ref: /services/app-sre/shared-resources/default-network-policies.yaml
- $ref: /services/app-sre/shared-resources/quayio-pull-secret.yml

networkPoliciesAllow:
- $ref: /services/observability/namespaces/openshift-customer-monitoring.appsres06ue1.yml

openshiftResources:
- provider: vault-secret
  path: app-interface/cna/integration/runtime
  version: 2
# allows creation of Taskruns
- provider: resource
  path: /cna/integration/taskrunner.rolebinding.yaml
- provider: resource
  path: /cna/integration/taskrunner.role.yaml
- provider: route
  path: /cna/integration/cna.route.yaml
# AWS STS credentials
- provider: resource-template
  path: /cna/cna-aws-credentials.secret.yaml

managedExternalResources: true

externalResources:
- provider: aws
  provisioner:
    $ref: /aws/app-sre-stage/account.yml
  resources:
  - provider: rds
    identifier: cna-integration
    defaults: /terraform/resources/app-sre-stage/rds-3-pg14.yml
    overrides:
      apply_immediately: false
      engine_version: '14.3'
  - provider: elasticache
    identifier: cna-redis-integration
    defaults: /terraform/resources/cna/elasticache-integration.yml
    output_resource_name: cna-redis
- provider: aws
  provisioner:
    $ref: /aws/app-sre-rosa/account.yml
  resources:
  # this is the role that allows the cna-sa kube service account to assume the
  # cna-service-integration role in the cna-service-integration AWS account via
  # AssumeRoleWithWebIdentity and a bound service token
  - provider: aws-iam-role
    identifier: cna-service-integration-appsres06ue1
    assume_role:
      Federated: arn:aws:iam::366871242094:oidc-provider/rh-oidc.s3.us-east-1.amazonaws.com/25qam2sc4pg79u1vbstr81f2snhea8gm
    assume_action: "AssumeRoleWithWebIdentity"
    # the condition makes sure that only the cna-sa service-account in the cna-integration namespace can assume this role
    assume_condition:
      StringEquals:
        "rh-oidc.s3.us-east-1.amazonaws.com/25qam2sc4pg79u1vbstr81f2snhea8gm:sub": "system:serviceaccount:cna-integration:cna-sa"
    # this is the policy on the "cluster-side", allowing the cna-sa service account to assume the
    # cna-service-integration role in the cna-service-integration AWS account
    inline_policy:
      # this allows us to assume the jump role in the cna-service-integration AWS account
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "sts:AssumeRole",
            "Resource": "arn:aws:iam::072580917141:role/cna-service-integration"
          }
        ]
      }
    output_resource_name: cna-sts-iam
- provider: aws
  provisioner:
    $ref: /aws/cna-service-integration/account.yml
  resources:
  - provider: s3
    # this is the bucket for terraform state
    identifier: cna-s3-integration
    defaults: /terraform/resources/s3-private-1.yml
    output_resource_name: cna-s3
  # this is the jump-host IAM role CNA users grant assume role to for their AWS accounts
  # this role is NOT TO BE USED DIRECTLY by CNA or anyone, instead this role needs to
  # be assumed by the CNA service account via cluster STS
  - provider: aws-iam-role
    identifier: cna-service-integration
    output_resource_name: cna-service-role-arn
    assume_role:
      AWS:
      # for this to work the role_session_name needs to be set to `cna` while assuming
      # into this role
      - arn:aws:sts::366871242094:assumed-role/cna-service-integration-appsres06ue1/cna
    inline_policy:
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/RH-CNA"
          },
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/network-mgmt-*"
          },
          {
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": "arn:aws:s3:::cna-s3-integration"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject",
              "s3:DeleteObject"
            ],
            "Resource": ["arn:aws:s3:::cna-s3-integration/*"]
          }
        ]
      }
  - provider: aws-iam-service-account
    identifier: cna-service-integration-iam-account
    output_resource_name: cna-service-integration-iam
    user_policy:
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/RH-CNA"
          },
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/network-mgmt-*"
          },
          {
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": "arn:aws:s3:::cna-s3-integration"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject",
              "s3:DeleteObject"
            ],
            "Resource": ["arn:aws:s3:::cna-s3-integration/*"]
          }
        ]
      }
