---
$schema: /app-sre/saas-file-2.yml

labels:
  service: image-builder
  platform: insights

name: image-builder
description: image-builder service deployment

# We reference our app definition here
app:
  $ref: /services/insights/image-builder/app.yml

# Deploys are carried out by a Tekton Pipeline. We have to specify which pipelines
# provider will do our deploys for us.
pipelinesProvider:
  $ref: /services/insights/pipelines/tekton.crc-pipelines.appsrep05ue1.yaml

# Every time a deploy is attempted, updates are fed to the CoreOS Slack instance
# in the #osbuild-image-builder-service channel.
slack:
  workspace:
    $ref: /dependencies/slack/coreos.yml
  channel: osbuild-image-builder-service

# Like in the namespace definition, for integrity purposes, we enumerate what
# types of OpenShift resources we're expecting to be created in the templates
managedResourceTypes:
  - ConfigMap
  - Deployment
  - DeploymentConfig
  - Service
  - ServiceAccount

# For integrity purposes, we enumerate here what container image registry path
# patterns we are expecting to exist in our OpenShift template. Usually you
# would only include quay.io/cloudservices here. If you want to use stock images
# for other services, it is recommended you mirror them to Quay by listing them
# in your app.yml
imagePatterns:
  - quay.io/cloudservices
  - quay.io/app-sre/fluentd-hec

# The authentication section is for providing the deploy integrations with the
# credentials they'd need to validate and perform a deploy.
authentication:
  image:
    path: app-sre/quay/app-sre-pull
    field: all


# Here we list the templates that go into deploying into our various
# clusters, along with the parameters that go into processing the templates.
resourceTemplates:
- name: image-builder
  # The URL of the Git repo where the OpenShift template can be found
  url: https://github.com/osbuild/image-builder
  # The path in the repository where the OpenShift template can be found
  path: /templates/image-builder.yml
  targets:
  # For each namespace we want to deploy this app into, create a target
    - namespace:
        $ref: /services/insights/image-builder/namespaces/stage-image-builder-stage.yml
      # The ref in the Git repo from which to find the version of the template to
      # deploy
      ref: main
      # We can't deploy the new version of the container until it is built, so to
      # make sure our deploy job waits until that build is complete, we specify
      # the name of the Jenkins job that performs the build for us. It's the
      # composition of the values of the gh_org, gh_repo, and build job name
      # from our build.yml file
      upstream:
        instance:
          $ref: /dependencies/ci-ext/ci-ext.yml
        name: osbuild-image-builder-gh-build-main
      parameters:
        # Parameters for the OpenShift template processing. These also inherit
        # all values from the environment you're deploying into as well as a
        # special IMAGE_TAG parameter matching the first 7 characters of the
        # revision ID in the repository referenced by url above. You can override
        # any of those if you must
        ALLOWED_ORG_IDS: "*"
        COMPOSER_URL: "https://api.stage.openshift.com"
      promotion:
        publish:
          - image-builder-stage-deploy-success-channel
    - namespace:
        $ref: /services/insights/image-builder/namespaces/prod-image-builder-prod.yml
      ref: 7eee0369deda0ada67e13d869e940195e8121c79
      parameters:
        COMPOSER_URL: "https://api.openshift.com"
      promotion:
        publish:
          - image-builder-prod-deploy-success-channel
