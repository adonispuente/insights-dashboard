---
$schema: /openshift/namespace-1.yml

labels:
  service: pes

# This will be the actual name of the OpenShift project created
name: pes-stage
description: Package Evolution Service - stage

# This references which cluster to create the namespace on. This value is for
# the stage cluster. The production cluster for cloud.redhat.com is crcp01ue1 
cluster:
  $ref: /openshift/crc-stg-01/cluster.yml

# We point back to our app definition here
app:
  $ref: /services/insights/pes/app.yml

# The environment injects a whole slew of parameters able to be used in your
# OpenShift templates for deploying to the cluster, including for example the
# hostnames of shared platform services, like Kafka
environment:
  $ref: /products/insights/environments/stage.yml

# Every namespace must explicitly allow workloads running in other namespaces
# to make network connections to it.
networkPoliciesAllow:
- $ref: /services/observability/namespaces/openshift-customer-monitoring.crc-stg-01.yml
- $ref: /services/insights/gateway/namespaces/stage-3scale-stage.yml

# If true, managedRoles will ensure that users with roles granting permission
# to this namespace are able to access it.
managedRoles: true

# For integrity purposes, you must enumerate the OpenShift resource types that
# you will be creating for use by workloads in this namespace. For now, this
# is empty. But if we needed to create a ServiceAccount, for example, that would
# go here.
managedResourceTypes: []

# You can enumerate the common resources available to workloads in this
# namespace, including Vault secrets, ConfigMaps, and more.
openshiftResources:
# To pull images from the Red Hat Container Registry, include this secret
- provider: vault-secret
  path: insights/secrets/global/rh-registry-pull
  version: 2
  type: kubernetes.io/dockerconfigjson
# To pull images from the Quay image registry, include this secret
- provider: vault-secret
  path: insights/quay/quay.io
  version: 3
  type: kubernetes.io/dockerconfigjson
  name: quay-cloudservices-pull

# app-interface uses Terraform to manage non-OpenShift resources, like AWS
# resources
managedTerraformResources: true

terraformResources:
# This provisions your app for monitoring by CloudWatch, disabled for now
- provider: cloudwatch
  account: insights-stage
  identifier: pes-stage
  defaults: /terraform/resources/insights/stage/cloudwatch/cloudwatch-1.yml
  output_resource_name: cloudwatch-disabled
  es_identifier: kibana-elasticsearch
