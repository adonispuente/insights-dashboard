---
$schema: /app-sre/saas-file-2.yml

labels:
  service: service-registry

name: saas-service-registry
description: 'SaaS tracking file for Managed Service Registry'

app:
  $ref: /services/service-registry/app.yml

pipelinesProvider:
  $ref: /services/service-registry/pipelines/tekton.service-registry-pipelines.appsrep05ue1.yaml

slack:
  workspace:
    $ref: /dependencies/slack/coreos.yml
  channel: service-registry

managedResourceTypes:
- Deployment
- Service
- ConfigMap

imagePatterns:
- quay.io/rhoas/srs-service-registry
- quay.io/rhoas/srs-tenant-manager
- quay.io/rhoas/srs-fleet-manager
- quay.io/rhoas/envoyproxy

authentication:
  image:
    path: managed-services/quay-org-accounts/rhoas/robots/rhoas-pull
    field: all

parameters:
  IMAGE_REGISTRY: quay.io
  SERVICE_ACCOUNT_NAME: rhoas-puller
  ENVOY_IMAGE: quay.io/rhoas/envoyproxy:v1.18.3

resourceTemplates:

- name: multitenant-service-registry
  url: https://gitlab.cee.redhat.com/service-registry/srs-service-registry
  path: /distro/openshift-template/mt/apicurio-registry-mt-template.yaml
  targets:
  - namespace:
      $ref: /services/service-registry/namespaces/service-registry-stage.yml
    ref: master
    image:
      org:
        $ref: /dependencies/quay/managedservices-rhoas.yml
      name: srs-service-registry
    promotion:
      publish:
      - service-registry-stage-deploy-success-channel
    parameters:
      TENANT_MANAGER_URL: https://tenant-manager-envoy.service-registry-stage.svc:9001
      KEYCLOAK_API_CLIENT_ID: registry-api-stage
  - namespace:
      $ref: /services/service-registry/namespaces/service-registry-production.yml
    # This is the SHA256 of the commit that will be deployed,
    # and which has been used as a *tag* for the image.
    # Make sure the image from the commit has been built and it is present in quay.io.
    # Do not confuse it with the SHA256 of the *image* itself.
    # Service Registry:
    ref: 9433cccbd47657b6012069c2134dcda50cc299f9
    parameters:
      TENANT_MANAGER_URL: https://tenant-manager-envoy.service-registry-production.svc:9001
      TENANT_MANAGER_CA_BUNDLE: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
      REGISTRY_LOG_LEVEL: INFO
      REGISTRY_QUARKUS_LOG_LEVEL: INFO
      AUTH_ENABLED: "true"
      KEYCLOAK_URL: https://sso.redhat.com/auth
      KEYCLOAK_REALM: redhat-external
      KEYCLOAK_API_CLIENT_ID: registry-api
      REGISTRY_AUTH_RBAC_ENABLED: "true"
      REGISTRY_AUTH_ROLE_SOURCE: "application"
      REGISTRY_AUTH_TENANT_OWNER_IS_ADMIN: "true"
      REGISTRY_AUTH_ADMIN_OVERRIDE_ENABLED: "true"
      REGISTRY_AUTH_ADMIN_OVERRIDE_FROM: "token"
      REGISTRY_AUTH_ADMIN_OVERRIDE_TYPE: "claim"
      REGISTRY_AUTH_ADMIN_OVERRIDE_CLAIM: "is_org_admin"
      REGISTRY_AUTH_ADMIN_OVERRIDE_CLAIM_VALUE: "true"
      REGISTRY_DOWNLOAD_HREF_TTL_DYNAMIC_ALLOW: "false"
      REGISTRY_AUTH_OWNER_ONLY_AUTHORIZATION_DYNAMIC_ALLOW: "true"
      REGISTRY_AUTH_OWNER_ONLY_AUTHORIZATION_LIMIT_GROUP_ACCESS_DYNAMIC_ALLOW: "false"
      REGISTRY_AUTH_ANONYMOUS_READ_ACCESS_ENABLED_DYNAMIC_ALLOW: "false"
      REGISTRY_AUTH_AUTHENTICATED_READ_ACCESS_ENABLED_DYNAMIC_ALLOW: "true"
      REGISTRY_AUTH_BASIC_AUTH_CLIENT_CREDENTIALS_ENABLED_DYNAMIC_ALLOW: "true"
      REGISTRY_CCOMPAT_LEGACY_ID_MODE_ENABLED_DYNAMIC_ALLOW: "true"
      REGISTRY_UI_FEATURES_READONLY_DYNAMIC_ALLOW: "false"
      IDENTITY_SERVER_RESOLVER_ENABLED: "false"
      IDENTITY_SERVER_RESOLVER_PATH: "https://api.openshift.com"
      IDENTITY_SERVER_RESOLVER_CACHE_EXPIRATION: "1"
  parameters:
    TENANT_MANAGER_CA_BUNDLE: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
    REGISTRY_LOG_LEVEL: INFO
    REGISTRY_QUARKUS_LOG_LEVEL: INFO
    AUTH_ENABLED: "true"
    KEYCLOAK_URL: https://sso.redhat.com:443/auth
    KEYCLOAK_REALM: redhat-external
    REGISTRY_AUTH_RBAC_ENABLED: "true"
    REGISTRY_AUTH_ROLE_SOURCE: "application"
    REGISTRY_AUTH_TENANT_OWNER_IS_ADMIN: "true"
    REGISTRY_AUTH_ADMIN_OVERRIDE_ENABLED: "true"
    REGISTRY_AUTH_ADMIN_OVERRIDE_FROM: "token"
    REGISTRY_AUTH_ADMIN_OVERRIDE_TYPE: "claim"
    REGISTRY_AUTH_ADMIN_OVERRIDE_CLAIM: "is_org_admin"
    REGISTRY_AUTH_ADMIN_OVERRIDE_CLAIM_VALUE: "true"
    REGISTRY_DOWNLOAD_HREF_TTL_DYNAMIC_ALLOW: "false"
    REGISTRY_AUTH_OWNER_ONLY_AUTHORIZATION_DYNAMIC_ALLOW: "true"
    REGISTRY_AUTH_OWNER_ONLY_AUTHORIZATION_LIMIT_GROUP_ACCESS_DYNAMIC_ALLOW: "false"
    REGISTRY_AUTH_ANONYMOUS_READ_ACCESS_ENABLED_DYNAMIC_ALLOW: "false"
    REGISTRY_AUTH_AUTHENTICATED_READ_ACCESS_ENABLED_DYNAMIC_ALLOW: "true"
    REGISTRY_AUTH_BASIC_AUTH_CLIENT_CREDENTIALS_ENABLED_DYNAMIC_ALLOW: "true"
    REGISTRY_CCOMPAT_LEGACY_ID_MODE_ENABLED_DYNAMIC_ALLOW: "true"
    REGISTRY_UI_FEATURES_READONLY_DYNAMIC_ALLOW: "false"
    TENANT_MANAGER_CLIENT_SECRET_NAME: srs-tenant-manager-credentials
    APICURIO_REGISTRY_IMAGE_REPOSITORY: rhoas/srs-service-registry
    DATABASE_SECRET_NAME: srs-service-registry-rds
    REPLICAS: 3
    ENVOY_CONFIG_CM_NAME: srs-service-registry-envoy-config
    APICURIO_REGISTRY_MEMORY_REQUEST: 600Mi
    APICURIO_REGISTRY_MEMORY_LIMIT: 1300Mi
    APICURIO_REGISTRY_CPU_REQUEST: 500m
    APICURIO_REGISTRY_CPU_LIMIT: 2000m
    ENABLE_SENTRY: "true"
    SENTRY_DSN_SECRET_NAME: sentry-dsn-secret
    DATABASE_SSL_CA_SECRET_NAME: rds-ssl-ca
    CORS_ALLOWED_ORIGINS: /(https?:\/\/localhost(:\\d*)?)|(https:\/\/(qaprodauth\.)?(cloud|console)\.redhat\.com)|(https:\/\/(prod|qa|ci|stage)\.foo\.redhat\.com:1337)/

- name: srs-tenant-manager
  url: https://gitlab.cee.redhat.com/service-registry/srs-tenant-manager
  path: /distro/openshift-template/mt/tenant-manager-template.yaml
  targets:
  - namespace:
      $ref: /services/service-registry/namespaces/service-registry-stage.yml
    ref: main
    image:
      org:
        $ref: /dependencies/quay/managedservices-rhoas.yml
      name: srs-tenant-manager
    parameters:
      KEYCLOAK_API_CLIENT_ID: registry-api-stage
  - namespace:
      $ref: /services/service-registry/namespaces/service-registry-production.yml
     # This is the SHA256 of the commit that will be deployed,
     # and which has been used as a *tag* for the image.
     # Make sure the image from the commit has been built and it is present in quay.io.
     # Do not confuse it with the SHA256 of the *image* itself.
     # Tenant Manager:
    ref: e7fbad6c10890eedd28c2df07a501f0c6c4bd0a2
    parameters:
      KEYCLOAK_API_CLIENT_ID: registry-api
  parameters:
    TENANT_MANAGER_REPLICAS: 3
    KEYCLOAK_REALM: redhat-external
    KEYCLOAK_URL: https://sso.redhat.com/auth
    TENANT_MANAGER_QUARKUS_LOG_LEVEL: INFO
    TENANT_MANAGER_LOG_LEVEL: INFO
    TENANT_MANAGER_ENVOY_CONFIG_CM_NAME: srs-tenant-manager-envoy-config
    AUTH_ENABLED: "true"
    TENANT_MANAGER_IMAGE_REPOSITORY: rhoas/srs-tenant-manager
    DATABASE_SECRET_NAME: srs-service-registry-rds
    DATABASE_SSL_CA_SECRET_NAME: rds-ssl-ca
    ENVOY_CONFIG_CM_NAME: srs-service-registry-envoy-config
    TENANT_MANAGER_MEMORY_REQUEST: 600Mi
    TENANT_MANAGER_MEMORY_LIMIT: 1000Mi
    TENANT_MANAGER_CPU_REQUEST: 300m
    TENANT_MANAGER_CPU_LIMIT: 600m
    TENANT_MANAGER_CLIENT_SECRET_NAME: srs-tenant-manager-credentials
    ENABLE_SENTRY: "true"
    SENTRY_DSN_SECRET_NAME: sentry-dsn-secret
    CORS_ALLOWED_ORIGINS: /(https?:\/\/localhost(:\\d*)?)|(https:\/\/(qaprodauth\.)?(cloud|console)\.redhat\.com)|(https:\/\/(prod|qa|ci|stage)\.foo\.redhat\.com:1337)/

- name: srs-fleet-manager
  url: https://gitlab.cee.redhat.com/service-registry/srs-fleet-manager
  path: /templates/srs-fleet-manager-template.yaml
  targets:
  - namespace:
      $ref: /services/service-registry/namespaces/service-registry-stage.yml
    ref: master
    image:
      org:
        $ref: /dependencies/quay/managedservices-rhoas.yml
      name: srs-fleet-manager
    parameters:
      AMS_URL: https://api.stage.openshift.com
      REGISTRY_BROWSER_URL: "https://qaprodauth.cloud.redhat.com/application-services/service-registry/t/TENANT_ID"
      # List of static service-registry deployments, will be used as target to provision registry tenants
      REGISTRY_DEPLOYMENTS_LIST:
        - name: registry-stage-1
          registryDeploymentUrl: https://bu98.serviceregistry-stage.rhcloud.com
          tenantManagerUrl: https://tenant-manager-envoy.service-registry-stage.svc:9001
  - namespace:
      $ref: /services/service-registry/namespaces/service-registry-production.yml
    # This is the SHA256 of the commit that will be deployed,
    # and which has been used as a *tag* for the image.
    # Make sure the image from the commit has been built and it is present in quay.io.
    # Do not confuse it with the SHA256 of the *image* itself.
    # Fleet Manager:
    ref: f6f714d518ea83dbafc7fe48d1424cce30c4bfcd
    parameters:
      LOG_LEVEL: INFO
      SRS_LOG_LEVEL: INFO
      REPLICAS: 3
      TENANT_MANAGER_CA_BUNDLE: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
      TENANT_MANAGER_AUTH_SERVER_URL: https://sso.redhat.com/auth
      TENANT_MANAGER_AUTH_SERVER_REALM: redhat-external
      TENANT_MANAGER_AUTH_SECRET_NAME: srs-tenant-manager-credentials
      FLEET_MANAGER_AUTH_SECRET_NAME: srs-fleet-manager-credentials
      AMS_URL: https://api.openshift.com
      SSO_TOKEN_ENDPOINT: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
      EVAL_RESOURCE_NAME: rhosr
      EVAL_PRODUCT_ID: RHOSRTrial
      REGISTRY_INSTANCES_EVAL_LIFETIME_SECONDS: 5356800 # 2 months = 2 * 31 * 24 * 60 * 60 = 5356800 seconds
      REGISTRY_BROWSER_URL: "https://console.redhat.com/application-services/service-registry/t/TENANT_ID"
      REGISTRY_INSTANCES_EVAL_ONLY: "false"
      REGISTRY_DEPLOYMENTS_LIST:
        - name: registry-prod-1
          registryDeploymentUrl: https://bu98.serviceregistry.rhcloud.com
          tenantManagerUrl: https://tenant-manager-envoy.service-registry-production.svc:9001
      REST_API_DISABLED_PATHS_PATTERNS: "/api/serviceregistry_mgmt/v1/admin/tasks.*,/api/serviceregistry_mgmt/v1/admin/registryDeployments.*"
      IDENTITY_SERVER_RESOLVER_ENABLED: "false"
      IDENTITY_SERVER_RESOLVER_PATH: "https://api.openshift.com"
      IDENTITY_SERVER_RESOLVER_CACHE_EXPIRATION: "1"
  parameters:
    LOG_LEVEL: INFO
    SRS_LOG_LEVEL: INFO
    REPLICAS: 3
    REGISTRY_INSTANCES_EVAL_ONLY: "false"
    TENANT_MANAGER_CA_BUNDLE: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
    TENANT_MANAGER_AUTH_SERVER_URL: https://sso.redhat.com/auth
    TENANT_MANAGER_AUTH_SERVER_REALM: redhat-external
    TENANT_MANAGER_AUTH_SECRET_NAME: srs-tenant-manager-credentials
    FLEET_MANAGER_AUTH_SECRET_NAME: srs-fleet-manager-credentials
    IMAGE_REPOSITORY: rhoas/srs-fleet-manager
    DATABASE_SECRET_NAME: srs-fleet-manager-rds
    ENVOY_CONFIG_CM_NAME: srs-fleet-manager-envoy-config
    SSO_TOKEN_ENDPOINT: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
    EVAL_RESOURCE_NAME: rhosr
    EVAL_PRODUCT_ID: RHOSRTrial
    REGISTRY_INSTANCES_EVAL_LIFETIME_SECONDS: 5356800 # 2 months = 2 * 31 * 24 * 60 * 60 = 5356800 seconds
    # Auth config
    AUTH_ENABLED: "true"
    KEYCLOAK_REALM: redhat-external
    KEYCLOAK_URL: https://sso.redhat.com/auth
    KEYCLOAK_API_CLIENT_ID: srs-fleet-manager-api-prod
    # sentry
    ENABLE_SENTRY: "true"
    SENTRY_DSN_SECRET_NAME: sentry-dsn-secret
    # AMS - Terms And Conditions
    AMS_TERMS_EVENT_CODE: "register"
    # rds ssl
    DATABASE_SSL_CA_SECRET_NAME: rds-ssl-ca
    CORS_ALLOWED_ORIGINS: /(https?:\/\/localhost(:\\d*)?)|(https:\/\/(qaprodauth\.)?(cloud|console)\.redhat\.com)|(https:\/\/(prod|qa|ci|stage)\.foo\.redhat\.com:1337)/
    REST_API_DISABLED_PATHS_PATTERNS: "/api/serviceregistry_mgmt/v1/admin/tasks.*,/api/serviceregistry_mgmt/v1/admin/registryDeployments.*"

