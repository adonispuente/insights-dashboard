apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: argocd
spec:
  resourceHealthChecks:
  - group: operators.coreos.com
    kind: Subscription
    check: |
      health_status = {}
      if obj.status ~= nil then
          if obj.status.conditions ~= nil then
              numDegraded = 0
              numPending = 0
              msg = ""
              for i, condition in pairs(obj.status.conditions) do
                  msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
                  if condition.type == "InstallPlanPending" and condition.status == "True" then
                      numPending = numPending + 1
                  elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
                      numDegraded = numDegraded + 1
                  elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
                      numDegraded = numDegraded + 1
                  end
              end
          end
          if numDegraded == 0 and numPending == 0 then
              health_status.status = "Healthy"
              health_status.message = msg
              return health_status
          elseif numPending > 0 and numDegraded == 0 and obj.spec.installPlanApproval == "Manual" then
              health_status.status = "Healthy"
              health_status.message = "An install plan for a subscription is pending installation but install plan approval is set to manual so considering this as healthy: " .. msg
              return health_status
          elseif numPending > 0 and numDegraded == 0 then
              health_status.status = "Progressing"
              health_status.message = "An install plan for a subscription is pending installation"
              return health_status
          else
              health_status.status = "Degraded"
              health_status.message = msg
              return health_status
          end
      end
      return health_status
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    route:
      enabled: true
      tls:
        termination: reencrypt
    service:
      type: ''
  grafana:
    enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
    route:
      enabled: false
  notifications:
    enabled: false
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  initialSSHKnownHosts: {}
  sso:
    dex:
      openShiftOAuth: true
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
    provider: dex
  applicationSet:
    resources:
      limits:
        cpu: '2'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    webhookServer:
      ingress:
        enabled: false
      route:
        enabled: false
  rbac:
    policy: |
      p, role:developer, applications, sync, default/*, allow
      p, role:developer, applications, get, default/*, allow
      p, role:developer, logs, get, default/*, allow

      g, argocd-developers, role:developer

      p, role:release-eng, applications, sync, tenants-config/*, allow
      p, role:release-eng, applications, get, tenants-config/*, allow
      p, role:release-eng, logs, get, tenants-config/*, allow

      p, role:release-eng, applications, sync, rh-managed-workspaces-config/*, allow
      p, role:release-eng, applications, get, rh-managed-workspaces-config/*, allow
      p, role:release-eng, logs, get, rh-managed-workspaces-config/*, allow

      g, argocd-release-eng, role:release-eng

    scopes: '[groups]'
  repo:
    resources:
      limits:
        cpu: '1'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  ha:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  tls:
    ca: {}
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: 2
        memory: 8Gi
      requests:
        cpu: 2
        memory: 8Gi
    sharding: {}
  resource.customizations: |
    logging.openshift.io/ClusterLogForwarder:
      health.lua: |
        local obj = resource
        local hs = {
          status = "Progressing",
          message = "Waiting for pipeline readiness status"
        }
        local allPipelines = {}
        local notReadyPipelines = {}

        local pipelines = obj.status and obj.status.pipelines or {}
        for _, pipeline in ipairs(pipelines) do
            local conditions = pipeline.conditions or { { type = "Ready", status = "False", message = "The conditions field is missing for " .. pipeline.name } }
            for _, condition in ipairs(conditions) do
                if condition.type == "Ready" then
                    hs.message = condition.message
                    hs.status = condition.status == "False" and "Degraded" or "Healthy"
                    table.insert(allPipelines, pipeline.name)
                    if hs.status == "Degraded" then
                        table.insert(notReadyPipelines, pipeline.name)
                    end
                end
            end
        end

        hs.status = #notReadyPipelines == 0 and "Healthy" or "Degraded"
        hs.message = #notReadyPipelines == 0 and "All pipelines are ready" or "Not ready pipelines: " .. table.concat(notReadyPipelines, ", ")

        return hs
