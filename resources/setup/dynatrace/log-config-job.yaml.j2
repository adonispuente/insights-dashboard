# TODO: MYDEBUGGERMARKER
# TODO: introduce logging flag in namespace to check whether logging is enabled | selectattr("enableLogging", "equalto", true)
{% set namespaces = query('/queries/dynatrace/namespaces-for-cluster.graphql', name=resource.namespace.cluster.name)[0].namespaces | selectattr("name", "equalto", "cert-manager")%}
---
apiVersion: batch/v1
kind: Job
metadata:
  # TODO: add hash suffix
  name: log-config
  namespace: dynatrace
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      volumes:
        - name: dynatrace-tokens
          projected:
            sources:
              - secret:
                  name: dynatrace-tokens
                  items:
                    - key: apiToken
                      path: apiToken
      containers:
        - name: log-config
          image: quay.io/app-sre/ubi8-ubi
          volumeMounts:
            - name: dynatrace-tokens
              mountPath: /secrets/apiToken
              subPath: apiToken
              readOnly: true
          command: ["/bin/bash", "-c"]
          args:
            - |
              #!/bin/bash
              # TODO: proper image with jq inside
              curl -o /tmp/jq -sL https://github.com/jqlang/jq/releases/download/jq-1.6/jq-linux64
              chmod +x /tmp/jq
              PATH=/tmp/:$PATH

              NAMESPACES=({%- for namespace in namespaces -%}"{{ namespace.name }}" {% endfor -%})
              DYNATRACE_API_TOKEN=$(cat /secrets/apiToken)
              DT_API_URL="{{ DT_ENV_URL }}/api/v2"
              CLUSTER_NAME="{{ resource.namespace.cluster.name }}"
              RULE_NAME="log-cluster-namespaces"
              # Lets give the DT stack a total of 10 minutes to bootstrap
              MAX_TRIES=30
              SLEEP_TIME_IN_S=20

              for ((i=1; i<=$MAX_TRIES; i++))
              do
                  hostGroupData=$(curl -s -X GET -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" -H "Content-Type: application/json" "$DT_API_URL/entities?entitySelector=type(\"HOST_GROUP\"),entityName(\"$CLUSTER_NAME\")&fields=properties")
                  totalCount=$(echo "$hostGroupData" | jq -r '.totalCount')
                  if [ "$totalCount" -eq 1 ]; then
                      hostGroupId=$(echo $hostGroupData | jq -r '.entities[0].entityId')
                      break  # Exit the loop since condition is met
                  else
                      echo "$DT_API_URL returned $totalCount occurrences of cluster $CLUSTER_NAME amongst Dynatrace HOST_GROUPS. Retrying in $SLEEP_TIME_IN_S seconds..."
                      sleep $SLEEP_TIME_IN_S  # Wait for specified time before retrying
                  fi

                  if [ $i -eq $MAX_TRIES ]; then
                      echo "Reached maximum number of tries. Exiting..."
                      exit 1
                  fi
              done

              ruleObjectId=$(curl -s -X GET -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" -H "Content-Type: application/json" "$DT_API_URL/settings/objects?schemaIds=builtin:logmonitoring.log-storage-settings&scopes=$hostGroupId" | jq -r '.items[] | select(.value."config-item-title" == "'$RULE_NAME'") | .objectId')

              namespaces_json="["
              delimiter=""
              for item in "${NAMESPACES[@]}"; do
                namespaces_json+="${delimiter}\"${item}\""
                delimiter=", "
              done
              namespaces_json+="]"

              payload=$(cat <<EOF
              {
                "schemaId": "builtin:logmonitoring.log-storage-settings",
                "scope": "$hostGroupId",
                "value": {
                  "enabled": false,
                  "config-item-title": "$RULE_NAME",
                  "send-to-storage": true,
                  "matchers": [
                    {
                      "attribute": "k8s.namespace.name",
                      "operator": "MATCHES",
                      "values": $namespaces_json
                    }
                  ]
                }
              }
              EOF
              )

              if [[ -n "$ruleObjectId" ]]; then
                echo "There already exists a logging rule for cluster $CLUSTER_NAME. Lets adjust the existing one!"
                # https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings/objects/put-object
                curl -s -X PUT -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" -H "Content-Type: application/json" -d "$payload" "$DT_API_URL/settings/objects/$ruleObjectId"
              else
                echo "No logging rule for cluster $CLUSTER_NAME yet. Lets create a new one!"
                # https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings/schemas/builtin-logmonitoring-log-storage-settings
                curl -s -X POST -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" -H "Content-Type: application/json" -d "[$payload]" "$DT_API_URL/settings/objects"
              fi
