{%- set all_namespaces = query('/queries/dynatrace/namespaces-for-cluster.graphql', name=resource.namespace.cluster.name)[0].namespaces -%}
{%- set namespace_names = [] -%}
{%- for namespace in all_namespaces -%}
{%- set namespace_labels = namespace.labels | json_to_dict -%}
{%- if "enableDynatraceLogging" in namespace_labels -%}
{%- set tmp = namespace_names.append(namespace.name) -%}
{%- endif -%}
{%- endfor -%}
{%- set cluster_labels = resource.namespace.cluster.labels | json_to_dict -%}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: log-config-v2-{{ hash_list(namespace_names)[:8] }}
  namespace: dynatrace
spec:
  backoffLimit: 8  # ~10 minutes
  template:
    spec:
      restartPolicy: OnFailure
      volumes:
        - name: dynatrace-tokens
          projected:
            sources:
              - secret:
                  name: dynatrace-tokens
                  items:
                    - key: apiToken
                      path: apiToken
      containers:
        - name: log-config
          image: quay.io/app-sre/dynatrace-config-job:1.0
          volumeMounts:
            - name: dynatrace-tokens
              mountPath: /secrets/apiToken
              subPath: apiToken
              readOnly: true
          command: ["/bin/bash", "-c"]
          args:
            - |
              #!/bin/bash
              set -eo pipefail

              NAMESPACES=({%- for namespace in namespace_names -%}"{{ namespace }}" {% endfor -%})
              DYNATRACE_API_TOKEN=$(cat /secrets/apiToken)
              DT_API_URL="{{ cluster_labels['dynatraceEnvironmentUrl'] }}/api/v2"
              CLUSTER_NAME="{{ resource.namespace.cluster.name }}"
              RULE_NAME="log-cluster-namespaces"

              hostGroupData=$(curl -s -X GET -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" -H "Content-Type: application/json" "$DT_API_URL/entities?entitySelector=type(\"HOST_GROUP\"),entityName(\"$CLUSTER_NAME\")&fields=properties")
              totalCount=$(echo "$hostGroupData" | jq -r '.totalCount')
              if [ "$totalCount" -ne 1 ]; then
                echo "[ERROR] $DT_API_URL returned $totalCount occurrences of cluster $CLUSTER_NAME amongst Dynatrace HOST_GROUPS. If 0, then maybe DT stack isnt ready yet -> retry."
                exit 1
              fi
              hostGroupId=$(echo $hostGroupData | jq -r '.entities[0].entityId')
              ruleObjectId=$(curl -s -X GET -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" -H "Content-Type: application/json" "$DT_API_URL/settings/objects?schemaIds=builtin:logmonitoring.log-storage-settings&scopes=$hostGroupId" | jq -r '.items[] | select(.value."config-item-title" == "'$RULE_NAME'") | .objectId')

              namespaces_json="["
              delimiter=""
              for item in "${NAMESPACES[@]}"; do
                namespaces_json+="${delimiter}\"${item}\""
                delimiter=", "
              done
              namespaces_json+="]"

              # https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings/schemas/builtin-logmonitoring-log-storage-settings
              payload=$(cat <<EOF
              {
                "schemaId": "builtin:logmonitoring.log-storage-settings",
                "scope": "$hostGroupId",
                "value": {
                  "enabled": true,
                  "config-item-title": "$RULE_NAME",
                  "send-to-storage": true,
                  "matchers": [
                    {
                      "attribute": "k8s.namespace.name",
                      "operator": "MATCHES",
                      "values": $namespaces_json
                    }
                  ]
                }
              }
              EOF
              )

              if [[ -n "$ruleObjectId" ]]; then
                echo "There already exists a logging rule for cluster $CLUSTER_NAME. Lets adjust the existing one!"
                # https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings/objects/put-object
                curl -s -X PUT -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" -H "Content-Type: application/json" -d "$payload" "$DT_API_URL/settings/objects/$ruleObjectId"
              else
                echo "No logging rule for cluster $CLUSTER_NAME yet. Lets create a new one!"
                # https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings/objects/post-object
                curl -s -X POST -H "Authorization: Api-Token $DYNATRACE_API_TOKEN" -H "Content-Type: application/json" -d "[$payload]" "$DT_API_URL/settings/objects"
              fi
