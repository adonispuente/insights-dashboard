apiVersion: v1
data:
  ftps_sink_0.1.json: |-
    {
      "channels" : {
        "stable" : {
          "shard_metadata" : {
            "connector_revision" : "7",
            "connector_type" : "sink",
            "connector_image" : "quay.io/rhoas/cos-connector-ftps:0.1.7",
            "operators" : [ {
              "type" : "camel-connector-operator",
              "version" : "[1.0.0,2.0.0)"
            } ],
            "kamelets" : {
              "adapter" : {
                "name" : "ftps-sink",
                "prefix" : "ftps"
              },
              "kafka" : {
                "name" : "cos-kafka-source",
                "prefix" : "kafka"
              },
              "processors" : {
                "throttle" : "throttle-action",
                "jsonpath_set" : "cos-jsonpath-set-action",
                "log" : "cos-log-action",
                "jsonpath_rename" : "cos-jsonpath-rename-action",
                "jsonpath_extract" : "cos-jsonpath-extract-action",
                "jsonpath_remove" : "cos-jsonpath-remove-action"
              }
            }
          }
        }
      },
      "connector_type" : {
        "id" : "ftps_sink_0.1",
        "kind" : "ConnectorType",
        "icon_href" : "TODO",
        "name" : "FTPS Sink",
        "description" : "FTPS Sink",
        "version" : "0.1",
        "labels" : [ "sink" ],
        "capabilities" : [ "error_handler", "processors" ],
        "channels" : [ "stable" ],
        "schema" : {
          "type" : "object",
          "required" : [ "ftps_connection_host", "ftps_connection_port", "ftps_username", "ftps_password", "ftps_directory_name", "kafka_topic" ],
          "properties" : {
            "ftps_connection_host" : {
              "title" : "Connection Host",
              "description" : "Hostname of the FTP server",
              "type" : "string"
            },
            "ftps_connection_port" : {
              "title" : "Connection Port",
              "description" : "Port of the FTP server",
              "type" : "string",
              "default" : 21
            },
            "ftps_username" : {
              "title" : "Username",
              "description" : "The username to access the FTP server",
              "type" : "string",
              "x-group" : "credentials"
            },
            "ftps_password" : {
              "title" : "Password",
              "x-group" : "credentials",
              "oneOf" : [ {
                "title" : "Password",
                "description" : "The password to access the FTP server",
                "type" : "string",
                "format" : "password"
              }, {
                "description" : "An opaque reference to the ftps_password",
                "type" : "object",
                "properties" : { }
              } ]
            },
            "ftps_directory_name" : {
              "title" : "Directory Name",
              "description" : "The starting directory",
              "type" : "string"
            },
            "ftps_passive_mode" : {
              "title" : "Passive Mode",
              "description" : "Sets passive mode connection",
              "type" : "boolean",
              "default" : false
            },
            "ftps_file_exist" : {
              "title" : "File Existence",
              "description" : "How to behave in case of file already existent. There are 4 enums and the value can be one of Override, Append, Fail or Ignore",
              "type" : "string",
              "default" : "Override"
            },
            "kafka_topic" : {
              "title" : "Topic Names",
              "description" : "Comma separated list of Kafka topic names",
              "type" : "string"
            },
            "kafka_registry_url" : {
              "title" : "Topic Service Registry URL",
              "description" : "Topic Service registry URL",
              "type" : "string"
            },
            "processors" : {
              "type" : "array",
              "items" : {
                "oneOf" : [ {
                  "type" : "object",
                  "required" : [ "throttle" ],
                  "properties" : {
                    "throttle" : {
                      "$ref" : "#/$defs/processors/throttle"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "log" ],
                  "properties" : {
                    "log" : {
                      "$ref" : "#/$defs/processors/log"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_extract" ],
                  "properties" : {
                    "jsonpath_extract" : {
                      "$ref" : "#/$defs/processors/jsonpath_extract"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_remove" ],
                  "properties" : {
                    "jsonpath_remove" : {
                      "$ref" : "#/$defs/processors/jsonpath_remove"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_rename" ],
                  "properties" : {
                    "jsonpath_rename" : {
                      "$ref" : "#/$defs/processors/jsonpath_rename"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_set" ],
                  "properties" : {
                    "jsonpath_set" : {
                      "$ref" : "#/$defs/processors/jsonpath_set"
                    }
                  }
                } ]
              }
            },
            "error_handler" : {
              "type" : "object",
              "oneOf" : [ {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "dead_letter_queue" ],
                "properties" : {
                  "dead_letter_queue" : {
                    "$ref" : "#/$defs/error_handler/dead_letter_queue"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "log" ],
                "properties" : {
                  "log" : {
                    "$ref" : "#/$defs/error_handler/log"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "stop" ],
                "properties" : {
                  "stop" : {
                    "$ref" : "#/$defs/error_handler/stop"
                  }
                }
              } ]
            }
          },
          "$defs" : {
            "processors" : {
              "throttle" : {
                "title" : "Throttle Action",
                "description" : "The Throttle action allows to ensure that a specific sink does not get overloaded.",
                "required" : [ "messages" ],
                "properties" : {
                  "messages" : {
                    "title" : "Messages Number",
                    "description" : "The number of messages to send in the time period set",
                    "type" : "integer",
                    "example" : 10
                  },
                  "timePeriod" : {
                    "title" : "Time Period",
                    "description" : "Sets the time period during which the maximum request count is valid for, in milliseconds",
                    "type" : "string",
                    "default" : "1000"
                  }
                },
                "type" : "object"
              },
              "log" : {
                "title" : "Log",
                "description" : "Log payload.",
                "type" : "object",
                "properties" : {
                  "multiLine" : {
                    "title" : "Multi Line",
                    "description" : "Multi Line",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showProperties" : {
                    "title" : "Show Properties",
                    "description" : "Show Properties",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showHeaders" : {
                    "title" : "Show Headers",
                    "description" : "Show Headers",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  }
                }
              },
              "jsonpath_extract" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_remove" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_rename" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "newKey" : {
                    "title" : "NewKey",
                    "description" : "NewKey",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_set" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "value" : {
                    "title" : "Value",
                    "description" : "Value",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              }
            },
            "error_handler" : {
              "dead_letter_queue" : {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "topic" ],
                "properties" : {
                  "topic" : {
                    "type" : "string",
                    "title" : "Dead Letter Topic Name",
                    "description" : "The name of the Kafka topic used as dead letter queue"
                  }
                }
              },
              "log" : {
                "type" : "object",
                "additionalProperties" : false
              },
              "stop" : {
                "type" : "object",
                "additionalProperties" : false
              }
            }
          }
        }
      }
    }
  ftps_source_0.1.json: |-
    {
      "channels" : {
        "stable" : {
          "shard_metadata" : {
            "connector_revision" : "7",
            "connector_type" : "source",
            "connector_image" : "quay.io/rhoas/cos-connector-ftps:0.1.7",
            "operators" : [ {
              "type" : "camel-connector-operator",
              "version" : "[1.0.0,2.0.0)"
            } ],
            "kamelets" : {
              "adapter" : {
                "name" : "ftps-source",
                "prefix" : "ftps"
              },
              "kafka" : {
                "name" : "cos-kafka-sink",
                "prefix" : "kafka"
              },
              "processors" : {
                "throttle" : "throttle-action",
                "jsonpath_set" : "cos-jsonpath-set-action",
                "log" : "cos-log-action",
                "jsonpath_rename" : "cos-jsonpath-rename-action",
                "jsonpath_extract" : "cos-jsonpath-extract-action",
                "jsonpath_remove" : "cos-jsonpath-remove-action"
              }
            }
          }
        }
      },
      "connector_type" : {
        "id" : "ftps_source_0.1",
        "kind" : "ConnectorType",
        "icon_href" : "TODO",
        "name" : "FTPS Source",
        "description" : "FTPS Source",
        "version" : "0.1",
        "labels" : [ "source" ],
        "capabilities" : [ "error_handler", "processors" ],
        "channels" : [ "stable" ],
        "schema" : {
          "type" : "object",
          "required" : [ "ftps_connection_host", "ftps_connection_port", "ftps_username", "ftps_password", "ftps_directory_name", "kafka_topic" ],
          "properties" : {
            "ftps_connection_host" : {
              "title" : "Connection Host",
              "description" : "Hostname of the FTPS server",
              "type" : "string"
            },
            "ftps_connection_port" : {
              "title" : "Connection Port",
              "description" : "Port of the FTPS server",
              "type" : "string",
              "default" : 21
            },
            "ftps_username" : {
              "title" : "Username",
              "description" : "The username to access the FTPS server",
              "type" : "string",
              "x-group" : "credentials"
            },
            "ftps_password" : {
              "title" : "Password",
              "x-group" : "credentials",
              "oneOf" : [ {
                "title" : "Password",
                "description" : "The password to access the FTPS server",
                "type" : "string",
                "format" : "password"
              }, {
                "description" : "An opaque reference to the ftps_password",
                "type" : "object",
                "properties" : { }
              } ]
            },
            "ftps_directory_name" : {
              "title" : "Directory Name",
              "description" : "The starting directory",
              "type" : "string"
            },
            "ftps_passive_mode" : {
              "title" : "Passive Mode",
              "description" : "Sets passive mode connection",
              "type" : "boolean",
              "default" : false
            },
            "ftps_recursive" : {
              "title" : "Recursive",
              "description" : "If a directory, will look for files in all the sub-directories as well.",
              "type" : "boolean",
              "default" : false
            },
            "ftps_idempotent" : {
              "title" : "Idempotency",
              "description" : "Skip already processed files.",
              "type" : "boolean",
              "default" : true
            },
            "kafka_topic" : {
              "title" : "Topic Names",
              "description" : "Comma separated list of Kafka topic names",
              "type" : "string"
            },
            "kafka_registry_url" : {
              "title" : "Topic Service Registry URL",
              "description" : "Topic Service registry URL",
              "type" : "string"
            },
            "processors" : {
              "type" : "array",
              "items" : {
                "oneOf" : [ {
                  "type" : "object",
                  "required" : [ "throttle" ],
                  "properties" : {
                    "throttle" : {
                      "$ref" : "#/$defs/processors/throttle"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "log" ],
                  "properties" : {
                    "log" : {
                      "$ref" : "#/$defs/processors/log"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_extract" ],
                  "properties" : {
                    "jsonpath_extract" : {
                      "$ref" : "#/$defs/processors/jsonpath_extract"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_remove" ],
                  "properties" : {
                    "jsonpath_remove" : {
                      "$ref" : "#/$defs/processors/jsonpath_remove"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_rename" ],
                  "properties" : {
                    "jsonpath_rename" : {
                      "$ref" : "#/$defs/processors/jsonpath_rename"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_set" ],
                  "properties" : {
                    "jsonpath_set" : {
                      "$ref" : "#/$defs/processors/jsonpath_set"
                    }
                  }
                } ]
              }
            },
            "error_handler" : {
              "type" : "object",
              "oneOf" : [ {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "dead_letter_queue" ],
                "properties" : {
                  "dead_letter_queue" : {
                    "$ref" : "#/$defs/error_handler/dead_letter_queue"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "log" ],
                "properties" : {
                  "log" : {
                    "$ref" : "#/$defs/error_handler/log"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "stop" ],
                "properties" : {
                  "stop" : {
                    "$ref" : "#/$defs/error_handler/stop"
                  }
                }
              } ]
            }
          },
          "$defs" : {
            "processors" : {
              "throttle" : {
                "title" : "Throttle Action",
                "description" : "The Throttle action allows to ensure that a specific sink does not get overloaded.",
                "required" : [ "messages" ],
                "properties" : {
                  "messages" : {
                    "title" : "Messages Number",
                    "description" : "The number of messages to send in the time period set",
                    "type" : "integer",
                    "example" : 10
                  },
                  "timePeriod" : {
                    "title" : "Time Period",
                    "description" : "Sets the time period during which the maximum request count is valid for, in milliseconds",
                    "type" : "string",
                    "default" : "1000"
                  }
                },
                "type" : "object"
              },
              "log" : {
                "title" : "Log",
                "description" : "Log payload.",
                "type" : "object",
                "properties" : {
                  "multiLine" : {
                    "title" : "Multi Line",
                    "description" : "Multi Line",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showProperties" : {
                    "title" : "Show Properties",
                    "description" : "Show Properties",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showHeaders" : {
                    "title" : "Show Headers",
                    "description" : "Show Headers",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  }
                }
              },
              "jsonpath_extract" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_remove" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_rename" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "newKey" : {
                    "title" : "NewKey",
                    "description" : "NewKey",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_set" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "value" : {
                    "title" : "Value",
                    "description" : "Value",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              }
            },
            "error_handler" : {
              "dead_letter_queue" : {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "topic" ],
                "properties" : {
                  "topic" : {
                    "type" : "string",
                    "title" : "Dead Letter Topic Name",
                    "description" : "The name of the Kafka topic used as dead letter queue"
                  }
                }
              },
              "log" : {
                "type" : "object",
                "additionalProperties" : false
              },
              "stop" : {
                "type" : "object",
                "additionalProperties" : false
              }
            }
          }
        }
      }
    }
  minio_sink_0.1.json: |-
    {
      "channels" : {
        "stable" : {
          "shard_metadata" : {
            "connector_revision" : "7",
            "connector_type" : "sink",
            "connector_image" : "quay.io/rhoas/cos-connector-minio:0.1.7",
            "operators" : [ {
              "type" : "camel-connector-operator",
              "version" : "[1.0.0,2.0.0)"
            } ],
            "kamelets" : {
              "adapter" : {
                "name" : "minio-sink",
                "prefix" : "minio"
              },
              "kafka" : {
                "name" : "cos-kafka-source",
                "prefix" : "kafka"
              },
              "processors" : {
                "throttle" : "throttle-action",
                "jsonpath_set" : "cos-jsonpath-set-action",
                "log" : "cos-log-action",
                "jsonpath_rename" : "cos-jsonpath-rename-action",
                "jsonpath_extract" : "cos-jsonpath-extract-action",
                "jsonpath_remove" : "cos-jsonpath-remove-action"
              }
            },
            "annotations" : {
              "trait.camel.apache.org/container.request-memory" : "256m"
            }
          }
        }
      },
      "connector_type" : {
        "id" : "minio_sink_0.1",
        "kind" : "ConnectorType",
        "icon_href" : "TODO",
        "name" : "Minio Sink",
        "description" : "Minio Sink",
        "version" : "0.1",
        "labels" : [ "sink" ],
        "capabilities" : [ "error_handler", "processors" ],
        "channels" : [ "stable" ],
        "schema" : {
          "type" : "object",
          "required" : [ "minio_bucket_name", "minio_access_key", "minio_secret_key", "minio_endpoint", "kafka_topic" ],
          "properties" : {
            "minio_bucket_name" : {
              "title" : "Bucket Name",
              "description" : "The Minio Bucket name",
              "type" : "string"
            },
            "minio_access_key" : {
              "title" : "Access Key",
              "x-group" : "credentials",
              "oneOf" : [ {
                "title" : "Access Key",
                "description" : "The access key obtained from Minio",
                "type" : "string",
                "format" : "password"
              }, {
                "description" : "An opaque reference to the minio_access_key",
                "type" : "object",
                "properties" : { }
              } ]
            },
            "minio_secret_key" : {
              "title" : "Secret Key",
              "x-group" : "credentials",
              "oneOf" : [ {
                "title" : "Secret Key",
                "description" : "The secret key obtained from Minio",
                "type" : "string",
                "format" : "password"
              }, {
                "description" : "An opaque reference to the minio_secret_key",
                "type" : "object",
                "properties" : { }
              } ]
            },
            "minio_endpoint" : {
              "title" : "Endpoint",
              "description" : "The Minio Endpoint, it can be an URL, domain name, IPv4 address or IPv6 address.",
              "type" : "string",
              "example" : "http://localhost:9000"
            },
            "minio_auto_create_bucket" : {
              "title" : "Autocreate Bucket",
              "description" : "Setting the autocreation of the Minio bucket bucketName.",
              "type" : "boolean",
              "default" : false
            },
            "kafka_topic" : {
              "title" : "Topic Names",
              "description" : "Comma separated list of Kafka topic names",
              "type" : "string"
            },
            "kafka_registry_url" : {
              "title" : "Topic Service Registry URL",
              "description" : "Topic Service registry URL",
              "type" : "string"
            },
            "processors" : {
              "type" : "array",
              "items" : {
                "oneOf" : [ {
                  "type" : "object",
                  "required" : [ "throttle" ],
                  "properties" : {
                    "throttle" : {
                      "$ref" : "#/$defs/processors/throttle"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "log" ],
                  "properties" : {
                    "log" : {
                      "$ref" : "#/$defs/processors/log"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_extract" ],
                  "properties" : {
                    "jsonpath_extract" : {
                      "$ref" : "#/$defs/processors/jsonpath_extract"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_remove" ],
                  "properties" : {
                    "jsonpath_remove" : {
                      "$ref" : "#/$defs/processors/jsonpath_remove"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_rename" ],
                  "properties" : {
                    "jsonpath_rename" : {
                      "$ref" : "#/$defs/processors/jsonpath_rename"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_set" ],
                  "properties" : {
                    "jsonpath_set" : {
                      "$ref" : "#/$defs/processors/jsonpath_set"
                    }
                  }
                } ]
              }
            },
            "error_handler" : {
              "type" : "object",
              "oneOf" : [ {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "dead_letter_queue" ],
                "properties" : {
                  "dead_letter_queue" : {
                    "$ref" : "#/$defs/error_handler/dead_letter_queue"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "log" ],
                "properties" : {
                  "log" : {
                    "$ref" : "#/$defs/error_handler/log"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "stop" ],
                "properties" : {
                  "stop" : {
                    "$ref" : "#/$defs/error_handler/stop"
                  }
                }
              } ]
            }
          },
          "$defs" : {
            "processors" : {
              "throttle" : {
                "title" : "Throttle Action",
                "description" : "The Throttle action allows to ensure that a specific sink does not get overloaded.",
                "required" : [ "messages" ],
                "properties" : {
                  "messages" : {
                    "title" : "Messages Number",
                    "description" : "The number of messages to send in the time period set",
                    "type" : "integer",
                    "example" : 10
                  },
                  "timePeriod" : {
                    "title" : "Time Period",
                    "description" : "Sets the time period during which the maximum request count is valid for, in milliseconds",
                    "type" : "string",
                    "default" : "1000"
                  }
                },
                "type" : "object"
              },
              "log" : {
                "title" : "Log",
                "description" : "Log payload.",
                "type" : "object",
                "properties" : {
                  "multiLine" : {
                    "title" : "Multi Line",
                    "description" : "Multi Line",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showProperties" : {
                    "title" : "Show Properties",
                    "description" : "Show Properties",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showHeaders" : {
                    "title" : "Show Headers",
                    "description" : "Show Headers",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  }
                }
              },
              "jsonpath_extract" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_remove" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_rename" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "newKey" : {
                    "title" : "NewKey",
                    "description" : "NewKey",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_set" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "value" : {
                    "title" : "Value",
                    "description" : "Value",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              }
            },
            "error_handler" : {
              "dead_letter_queue" : {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "topic" ],
                "properties" : {
                  "topic" : {
                    "type" : "string",
                    "title" : "Dead Letter Topic Name",
                    "description" : "The name of the Kafka topic used as dead letter queue"
                  }
                }
              },
              "log" : {
                "type" : "object",
                "additionalProperties" : false
              },
              "stop" : {
                "type" : "object",
                "additionalProperties" : false
              }
            }
          }
        }
      }
    }
  minio_source_0.1.json: |-
    {
      "channels" : {
        "stable" : {
          "shard_metadata" : {
            "connector_revision" : "7",
            "connector_type" : "source",
            "connector_image" : "quay.io/rhoas/cos-connector-minio:0.1.7",
            "operators" : [ {
              "type" : "camel-connector-operator",
              "version" : "[1.0.0,2.0.0)"
            } ],
            "kamelets" : {
              "adapter" : {
                "name" : "minio-source",
                "prefix" : "minio"
              },
              "kafka" : {
                "name" : "cos-kafka-sink",
                "prefix" : "kafka"
              },
              "processors" : {
                "throttle" : "throttle-action",
                "jsonpath_set" : "cos-jsonpath-set-action",
                "log" : "cos-log-action",
                "jsonpath_rename" : "cos-jsonpath-rename-action",
                "jsonpath_extract" : "cos-jsonpath-extract-action",
                "jsonpath_remove" : "cos-jsonpath-remove-action"
              }
            },
            "annotations" : {
              "trait.camel.apache.org/container.request-memory" : "256m"
            },
            "consumes" : "application/json",
            "produces" : "application/json"
          }
        }
      },
      "connector_type" : {
        "id" : "minio_source_0.1",
        "kind" : "ConnectorType",
        "icon_href" : "TODO",
        "name" : "Minio Source",
        "description" : "Minio Source",
        "version" : "0.1",
        "labels" : [ "source" ],
        "capabilities" : [ "data_shape", "error_handler", "processors" ],
        "channels" : [ "stable" ],
        "schema" : {
          "type" : "object",
          "required" : [ "minio_bucket_name", "minio_access_key", "minio_secret_key", "minio_endpoint", "kafka_topic" ],
          "properties" : {
            "minio_bucket_name" : {
              "title" : "Bucket Name",
              "description" : "The Minio Bucket name",
              "type" : "string"
            },
            "minio_delete_after_read" : {
              "title" : "Auto-delete Objects",
              "description" : "Delete objects after consuming them",
              "type" : "boolean",
              "default" : true
            },
            "minio_access_key" : {
              "title" : "Access Key",
              "x-group" : "credentials",
              "oneOf" : [ {
                "title" : "Access Key",
                "description" : "The access key obtained from Minio",
                "type" : "string",
                "format" : "password"
              }, {
                "description" : "An opaque reference to the minio_access_key",
                "type" : "object",
                "properties" : { }
              } ]
            },
            "minio_secret_key" : {
              "title" : "Secret Key",
              "x-group" : "credentials",
              "oneOf" : [ {
                "title" : "Secret Key",
                "description" : "The secret key obtained from Minio",
                "type" : "string",
                "format" : "password"
              }, {
                "description" : "An opaque reference to the minio_secret_key",
                "type" : "object",
                "properties" : { }
              } ]
            },
            "minio_endpoint" : {
              "title" : "Endpoint",
              "description" : "The Minio Endpoint, it can be an URL, domain name, IPv4 address or IPv6 address.",
              "type" : "string",
              "example" : "http://localhost:9000"
            },
            "minio_auto_create_bucket" : {
              "title" : "Autocreate Bucket",
              "description" : "Setting the autocreation of the Minio bucket bucketName.",
              "type" : "boolean",
              "default" : false
            },
            "kafka_topic" : {
              "title" : "Topic Names",
              "description" : "Comma separated list of Kafka topic names",
              "type" : "string"
            },
            "kafka_registry_url" : {
              "title" : "Topic Service Registry URL",
              "description" : "Topic Service registry URL",
              "type" : "string"
            },
            "processors" : {
              "type" : "array",
              "items" : {
                "oneOf" : [ {
                  "type" : "object",
                  "required" : [ "throttle" ],
                  "properties" : {
                    "throttle" : {
                      "$ref" : "#/$defs/processors/throttle"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "log" ],
                  "properties" : {
                    "log" : {
                      "$ref" : "#/$defs/processors/log"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_extract" ],
                  "properties" : {
                    "jsonpath_extract" : {
                      "$ref" : "#/$defs/processors/jsonpath_extract"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_remove" ],
                  "properties" : {
                    "jsonpath_remove" : {
                      "$ref" : "#/$defs/processors/jsonpath_remove"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_rename" ],
                  "properties" : {
                    "jsonpath_rename" : {
                      "$ref" : "#/$defs/processors/jsonpath_rename"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_set" ],
                  "properties" : {
                    "jsonpath_set" : {
                      "$ref" : "#/$defs/processors/jsonpath_set"
                    }
                  }
                } ]
              }
            },
            "data_shape" : {
              "type" : "object",
              "additionalProperties" : false,
              "properties" : {
                "produces" : {
                  "$ref" : "#/$defs/data_shape/produces"
                }
              }
            },
            "error_handler" : {
              "type" : "object",
              "oneOf" : [ {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "dead_letter_queue" ],
                "properties" : {
                  "dead_letter_queue" : {
                    "$ref" : "#/$defs/error_handler/dead_letter_queue"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "log" ],
                "properties" : {
                  "log" : {
                    "$ref" : "#/$defs/error_handler/log"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "stop" ],
                "properties" : {
                  "stop" : {
                    "$ref" : "#/$defs/error_handler/stop"
                  }
                }
              } ]
            }
          },
          "$defs" : {
            "processors" : {
              "throttle" : {
                "title" : "Throttle Action",
                "description" : "The Throttle action allows to ensure that a specific sink does not get overloaded.",
                "required" : [ "messages" ],
                "properties" : {
                  "messages" : {
                    "title" : "Messages Number",
                    "description" : "The number of messages to send in the time period set",
                    "type" : "integer",
                    "example" : 10
                  },
                  "timePeriod" : {
                    "title" : "Time Period",
                    "description" : "Sets the time period during which the maximum request count is valid for, in milliseconds",
                    "type" : "string",
                    "default" : "1000"
                  }
                },
                "type" : "object"
              },
              "log" : {
                "title" : "Log",
                "description" : "Log payload.",
                "type" : "object",
                "properties" : {
                  "multiLine" : {
                    "title" : "Multi Line",
                    "description" : "Multi Line",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showProperties" : {
                    "title" : "Show Properties",
                    "description" : "Show Properties",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showHeaders" : {
                    "title" : "Show Headers",
                    "description" : "Show Headers",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  }
                }
              },
              "jsonpath_extract" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_remove" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_rename" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "newKey" : {
                    "title" : "NewKey",
                    "description" : "NewKey",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_set" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "value" : {
                    "title" : "Value",
                    "description" : "Value",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              }
            },
            "data_shape" : {
              "produces" : {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "format" ],
                "properties" : {
                  "format" : {
                    "type" : "string",
                    "default" : "application/json",
                    "enum" : [ "application/json", "avro/binary" ]
                  }
                }
              }
            },
            "error_handler" : {
              "dead_letter_queue" : {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "topic" ],
                "properties" : {
                  "topic" : {
                    "type" : "string",
                    "title" : "Dead Letter Topic Name",
                    "description" : "The name of the Kafka topic used as dead letter queue"
                  }
                }
              },
              "log" : {
                "type" : "object",
                "additionalProperties" : false
              },
              "stop" : {
                "type" : "object",
                "additionalProperties" : false
              }
            }
          }
        }
      }
    }
  sftp_sink_0.1.json: |-
    {
      "channels" : {
        "stable" : {
          "shard_metadata" : {
            "connector_revision" : "7",
            "connector_type" : "sink",
            "connector_image" : "quay.io/rhoas/cos-connector-sftp:0.1.7",
            "operators" : [ {
              "type" : "camel-connector-operator",
              "version" : "[1.0.0,2.0.0)"
            } ],
            "kamelets" : {
              "adapter" : {
                "name" : "sftp-sink",
                "prefix" : "sftp"
              },
              "kafka" : {
                "name" : "cos-kafka-source",
                "prefix" : "kafka"
              },
              "processors" : {
                "throttle" : "throttle-action",
                "jsonpath_set" : "cos-jsonpath-set-action",
                "log" : "cos-log-action",
                "jsonpath_rename" : "cos-jsonpath-rename-action",
                "jsonpath_extract" : "cos-jsonpath-extract-action",
                "jsonpath_remove" : "cos-jsonpath-remove-action"
              }
            }
          }
        }
      },
      "connector_type" : {
        "id" : "sftp_sink_0.1",
        "kind" : "ConnectorType",
        "icon_href" : "TODO",
        "name" : "SFTP Sink",
        "description" : "SFTP Sink",
        "version" : "0.1",
        "labels" : [ "sink" ],
        "capabilities" : [ "error_handler", "processors" ],
        "channels" : [ "stable" ],
        "schema" : {
          "type" : "object",
          "required" : [ "sftp_connection_host", "sftp_connection_port", "sftp_username", "sftp_password", "sftp_directory_name", "kafka_topic" ],
          "properties" : {
            "sftp_connection_host" : {
              "title" : "Connection Host",
              "description" : "Hostname of the FTP server",
              "type" : "string"
            },
            "sftp_connection_port" : {
              "title" : "Connection Port",
              "description" : "Port of the FTP server",
              "type" : "string",
              "default" : 22
            },
            "sftp_username" : {
              "title" : "Username",
              "description" : "The username to access the FTP server",
              "type" : "string",
              "x-group" : "credentials"
            },
            "sftp_password" : {
              "title" : "Password",
              "x-group" : "credentials",
              "oneOf" : [ {
                "title" : "Password",
                "description" : "The password to access the FTP server",
                "type" : "string",
                "format" : "password"
              }, {
                "description" : "An opaque reference to the sftp_password",
                "type" : "object",
                "properties" : { }
              } ]
            },
            "sftp_directory_name" : {
              "title" : "Directory Name",
              "description" : "The starting directory",
              "type" : "string"
            },
            "sftp_passive_mode" : {
              "title" : "Passive Mode",
              "description" : "Sets passive mode connection",
              "type" : "boolean",
              "default" : false
            },
            "sftp_file_exist" : {
              "title" : "File Existence",
              "description" : "How to behave in case of file already existent. There are 4 enums and the value can be one of Override, Append, Fail or Ignore",
              "type" : "string",
              "default" : "Override"
            },
            "kafka_topic" : {
              "title" : "Topic Names",
              "description" : "Comma separated list of Kafka topic names",
              "type" : "string"
            },
            "kafka_registry_url" : {
              "title" : "Topic Service Registry URL",
              "description" : "Topic Service registry URL",
              "type" : "string"
            },
            "processors" : {
              "type" : "array",
              "items" : {
                "oneOf" : [ {
                  "type" : "object",
                  "required" : [ "throttle" ],
                  "properties" : {
                    "throttle" : {
                      "$ref" : "#/$defs/processors/throttle"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "log" ],
                  "properties" : {
                    "log" : {
                      "$ref" : "#/$defs/processors/log"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_extract" ],
                  "properties" : {
                    "jsonpath_extract" : {
                      "$ref" : "#/$defs/processors/jsonpath_extract"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_remove" ],
                  "properties" : {
                    "jsonpath_remove" : {
                      "$ref" : "#/$defs/processors/jsonpath_remove"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_rename" ],
                  "properties" : {
                    "jsonpath_rename" : {
                      "$ref" : "#/$defs/processors/jsonpath_rename"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_set" ],
                  "properties" : {
                    "jsonpath_set" : {
                      "$ref" : "#/$defs/processors/jsonpath_set"
                    }
                  }
                } ]
              }
            },
            "error_handler" : {
              "type" : "object",
              "oneOf" : [ {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "dead_letter_queue" ],
                "properties" : {
                  "dead_letter_queue" : {
                    "$ref" : "#/$defs/error_handler/dead_letter_queue"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "log" ],
                "properties" : {
                  "log" : {
                    "$ref" : "#/$defs/error_handler/log"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "stop" ],
                "properties" : {
                  "stop" : {
                    "$ref" : "#/$defs/error_handler/stop"
                  }
                }
              } ]
            }
          },
          "$defs" : {
            "processors" : {
              "throttle" : {
                "title" : "Throttle Action",
                "description" : "The Throttle action allows to ensure that a specific sink does not get overloaded.",
                "required" : [ "messages" ],
                "properties" : {
                  "messages" : {
                    "title" : "Messages Number",
                    "description" : "The number of messages to send in the time period set",
                    "type" : "integer",
                    "example" : 10
                  },
                  "timePeriod" : {
                    "title" : "Time Period",
                    "description" : "Sets the time period during which the maximum request count is valid for, in milliseconds",
                    "type" : "string",
                    "default" : "1000"
                  }
                },
                "type" : "object"
              },
              "log" : {
                "title" : "Log",
                "description" : "Log payload.",
                "type" : "object",
                "properties" : {
                  "multiLine" : {
                    "title" : "Multi Line",
                    "description" : "Multi Line",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showProperties" : {
                    "title" : "Show Properties",
                    "description" : "Show Properties",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showHeaders" : {
                    "title" : "Show Headers",
                    "description" : "Show Headers",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  }
                }
              },
              "jsonpath_extract" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_remove" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_rename" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "newKey" : {
                    "title" : "NewKey",
                    "description" : "NewKey",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_set" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "value" : {
                    "title" : "Value",
                    "description" : "Value",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              }
            },
            "error_handler" : {
              "dead_letter_queue" : {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "topic" ],
                "properties" : {
                  "topic" : {
                    "type" : "string",
                    "title" : "Dead Letter Topic Name",
                    "description" : "The name of the Kafka topic used as dead letter queue"
                  }
                }
              },
              "log" : {
                "type" : "object",
                "additionalProperties" : false
              },
              "stop" : {
                "type" : "object",
                "additionalProperties" : false
              }
            }
          }
        }
      }
    }
  sftp_source_0.1.json: |-
    {
      "channels" : {
        "stable" : {
          "shard_metadata" : {
            "connector_revision" : "7",
            "connector_type" : "source",
            "connector_image" : "quay.io/rhoas/cos-connector-sftp:0.1.7",
            "operators" : [ {
              "type" : "camel-connector-operator",
              "version" : "[1.0.0,2.0.0)"
            } ],
            "kamelets" : {
              "adapter" : {
                "name" : "sftp-source",
                "prefix" : "sftp"
              },
              "kafka" : {
                "name" : "cos-kafka-sink",
                "prefix" : "kafka"
              },
              "processors" : {
                "throttle" : "throttle-action",
                "jsonpath_set" : "cos-jsonpath-set-action",
                "log" : "cos-log-action",
                "jsonpath_rename" : "cos-jsonpath-rename-action",
                "jsonpath_extract" : "cos-jsonpath-extract-action",
                "jsonpath_remove" : "cos-jsonpath-remove-action"
              }
            }
          }
        }
      },
      "connector_type" : {
        "id" : "sftp_source_0.1",
        "kind" : "ConnectorType",
        "icon_href" : "TODO",
        "name" : "SFTP Source",
        "description" : "SFTP Source",
        "version" : "0.1",
        "labels" : [ "source" ],
        "capabilities" : [ "error_handler", "processors" ],
        "channels" : [ "stable" ],
        "schema" : {
          "type" : "object",
          "required" : [ "sftp_connection_host", "sftp_connection_port", "sftp_username", "sftp_password", "sftp_directory_name", "kafka_topic" ],
          "properties" : {
            "sftp_connection_host" : {
              "title" : "Connection Host",
              "description" : "Hostname of the SFTP server",
              "type" : "string"
            },
            "sftp_connection_port" : {
              "title" : "Connection Port",
              "description" : "Port of the FTP server",
              "type" : "string",
              "default" : 22
            },
            "sftp_username" : {
              "title" : "Username",
              "description" : "The username to access the SFTP server",
              "type" : "string",
              "x-group" : "credentials"
            },
            "sftp_password" : {
              "title" : "Password",
              "x-group" : "credentials",
              "oneOf" : [ {
                "title" : "Password",
                "description" : "The password to access the SFTP server",
                "type" : "string",
                "format" : "password"
              }, {
                "description" : "An opaque reference to the sftp_password",
                "type" : "object",
                "properties" : { }
              } ]
            },
            "sftp_directory_name" : {
              "title" : "Directory Name",
              "description" : "The starting directory",
              "type" : "string"
            },
            "sftp_passive_mode" : {
              "title" : "Passive Mode",
              "description" : "Sets passive mode connection",
              "type" : "boolean",
              "default" : false
            },
            "sftp_recursive" : {
              "title" : "Recursive",
              "description" : "If a directory, will look for files in all the sub-directories as well.",
              "type" : "boolean",
              "default" : false
            },
            "sftp_idempotent" : {
              "title" : "Idempotency",
              "description" : "Skip already processed files.",
              "type" : "boolean",
              "default" : true
            },
            "kafka_topic" : {
              "title" : "Topic Names",
              "description" : "Comma separated list of Kafka topic names",
              "type" : "string"
            },
            "kafka_registry_url" : {
              "title" : "Topic Service Registry URL",
              "description" : "Topic Service registry URL",
              "type" : "string"
            },
            "processors" : {
              "type" : "array",
              "items" : {
                "oneOf" : [ {
                  "type" : "object",
                  "required" : [ "throttle" ],
                  "properties" : {
                    "throttle" : {
                      "$ref" : "#/$defs/processors/throttle"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "log" ],
                  "properties" : {
                    "log" : {
                      "$ref" : "#/$defs/processors/log"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_extract" ],
                  "properties" : {
                    "jsonpath_extract" : {
                      "$ref" : "#/$defs/processors/jsonpath_extract"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_remove" ],
                  "properties" : {
                    "jsonpath_remove" : {
                      "$ref" : "#/$defs/processors/jsonpath_remove"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_rename" ],
                  "properties" : {
                    "jsonpath_rename" : {
                      "$ref" : "#/$defs/processors/jsonpath_rename"
                    }
                  }
                }, {
                  "type" : "object",
                  "required" : [ "jsonpath_set" ],
                  "properties" : {
                    "jsonpath_set" : {
                      "$ref" : "#/$defs/processors/jsonpath_set"
                    }
                  }
                } ]
              }
            },
            "error_handler" : {
              "type" : "object",
              "oneOf" : [ {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "dead_letter_queue" ],
                "properties" : {
                  "dead_letter_queue" : {
                    "$ref" : "#/$defs/error_handler/dead_letter_queue"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "log" ],
                "properties" : {
                  "log" : {
                    "$ref" : "#/$defs/error_handler/log"
                  }
                }
              }, {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "stop" ],
                "properties" : {
                  "stop" : {
                    "$ref" : "#/$defs/error_handler/stop"
                  }
                }
              } ]
            }
          },
          "$defs" : {
            "processors" : {
              "throttle" : {
                "title" : "Throttle Action",
                "description" : "The Throttle action allows to ensure that a specific sink does not get overloaded.",
                "required" : [ "messages" ],
                "properties" : {
                  "messages" : {
                    "title" : "Messages Number",
                    "description" : "The number of messages to send in the time period set",
                    "type" : "integer",
                    "example" : 10
                  },
                  "timePeriod" : {
                    "title" : "Time Period",
                    "description" : "Sets the time period during which the maximum request count is valid for, in milliseconds",
                    "type" : "string",
                    "default" : "1000"
                  }
                },
                "type" : "object"
              },
              "log" : {
                "title" : "Log",
                "description" : "Log payload.",
                "type" : "object",
                "properties" : {
                  "multiLine" : {
                    "title" : "Multi Line",
                    "description" : "Multi Line",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showProperties" : {
                    "title" : "Show Properties",
                    "description" : "Show Properties",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  },
                  "showHeaders" : {
                    "title" : "Show Headers",
                    "description" : "Show Headers",
                    "type" : "boolean",
                    "default" : false,
                    "x-descriptors" : [ "urn:camel:group:common" ]
                  }
                }
              },
              "jsonpath_extract" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_remove" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_rename" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "newKey" : {
                    "title" : "NewKey",
                    "description" : "NewKey",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              },
              "jsonpath_set" : {
                "title" : "Transform with JsonPath",
                "description" : "TBD",
                "type" : "object",
                "required" : [ "expression" ],
                "properties" : {
                  "expression" : {
                    "title" : "Expression",
                    "description" : "Expression",
                    "type" : "string"
                  },
                  "key" : {
                    "title" : "Key",
                    "description" : "Key",
                    "type" : "string"
                  },
                  "value" : {
                    "title" : "Value",
                    "description" : "Value",
                    "type" : "string"
                  }
                },
                "x-metadata" : {
                  "supported.content-type" : "application/x-struct"
                }
              }
            },
            "error_handler" : {
              "dead_letter_queue" : {
                "type" : "object",
                "additionalProperties" : false,
                "required" : [ "topic" ],
                "properties" : {
                  "topic" : {
                    "type" : "string",
                    "title" : "Dead Letter Topic Name",
                    "description" : "The name of the Kafka topic used as dead letter queue"
                  }
                }
              },
              "log" : {
                "type" : "object",
                "additionalProperties" : false
              },
              "stop" : {
                "type" : "object",
                "additionalProperties" : false
              }
            }
          }
        }
      }
    }
kind: ConfigMap
metadata:
  annotations:
    qontract.recycle: "true"
  name: connector-catalog-camel-storage
