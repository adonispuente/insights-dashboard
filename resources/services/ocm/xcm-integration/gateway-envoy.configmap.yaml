apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-envoy
  annotations:
    qontract.recycle: "true"
data:
  main.yaml: |-
    # Configure the administration interface to use a Unix socket so that
    # we don't expose it outside of the pod. Metrics will still be available
    # via an HTTP listener and cluster that translate HTTP requests for
    # /metrics into Unix socket requests for /stats/prometheus.
    admin:
      access_log_path: /dev/null
      address:
        pipe:
          path: /tmp/admin.socket

    static_resources:

      clusters:

      # This cluster exists so that we can answer the Kubernetes readiness and
      # liveness probes and so that we can translate /metrics requests into
      # /stats/prometheus wihout also having to expose the administration
      # port outside of the pod.
      - name: admin
        connect_timeout: 2s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: admin
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  pipe:
                    path: /tmp/admin.socket

      
      - name: global-uhc-gateway
        connect_timeout: 2s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sso
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: api.integration.openshift.com
                    port_value: 443
        dns_lookup_family: v4_only
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              validation_context:
                trusted_ca:
                  filename: /etc/ssl/certs/ca-certificates.crt

      listeners:

      # This listener is used to support probes and metrics.
      - name: admin
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 9000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: admin
              route_config:
                name: admin
                virtual_hosts:
                - name: admin
                  domains:
                  - "*"
                  routes:
                  - name: ready
                    match:
                      path: /ready
                    route:
                      cluster: admin
                  - name: metrics
                    match:
                      path: /metrics
                    route:
                      cluster: admin
                      prefix_rewrite: /stats/prometheus
              http_filters:
              - name: envoy.filters.http.router

      # This is the listener used for API traffic:
      - name: api
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 9001
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              xff_num_trusted_hops: 1
              stat_prefix: api
              upgrade_configs:
                - upgrade_type: websocket
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                  log_format:
                    json_format:
                      authority: "%REQ(:AUTHORITY)%"
                      bytes_rx: "%BYTES_RECEIVED%"
                      bytes_tx: "%BYTES_SENT%"
                      duration: "%DURATION%"
                      method: "%REQ(:METHOD)%"
                      path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                      protocol: "%PROTOCOL%"
                      response_code: "%RESPONSE_CODE%"
                      response_flags: "%RESPONSE_FLAGS%"
                      timestamp: "%START_TIME%"
                      user_agent: "%REQ(USER-AGENT)%"
                      upstream_duration: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                      x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                      x_request_id: "%REQ(X-REQUEST-ID)%"
                filter:
                  or_filter:
                    filters:
                    - header_filter:
                        header:
                          name: x-envoy-original-path
                          prefix_match: /api/assisted-images
                    - header_filter:
                        header:
                          name: :path
                          prefix_match: /api/assisted-install
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: /dev/stdout
              route_config:
                name: api
                virtual_hosts:
                - name: all
                  domains:
                  - "*"
                  routes:
                  - name: redirect
                    match:
                      prefix: /
                    route:
                      cluster: global-uhc-gateway

              http_filters:

              # This is always required.
              - name: envoy.filters.http.router

