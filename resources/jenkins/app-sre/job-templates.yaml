- job-template:
    id: 'gl-job-sos-report'
    name: '{gl_group}-{gl_project}-job-sos-report'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *hsd_gitlab_token
    publishers:
    - archive:
        artifacts: 'scripts/sos-report.html'
    builders:
    - shell: |
        cd scripts
        ./sos-issues.sh
        md=$(ls -rt sos-issues*md|tail -n1)
        pandoc sos-issues*md -o sos-report.html
    cron_expression: 0 9 * * 3
    <<: *gl_timed

- job-template:
    id: 'gl-job-workday-reminder'
    name: '{gl_group}-{gl_project}-job-workday-reminder'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *pd_api_key
        - *smtp
    builders:
    - shell: |
        python3 -m venv venv
        source venv/bin/activate
        pip3 install -r requirements.txt
        python3 workday-reminder.py
    cron_expression: 0 9 * * *
    <<: *gl_timed

- job-template:
    id: 'gl-build-master-jjb'
    name: '{gl_group}-{gl_project}-gl-build-{branch}-jjb'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *jjb_ini
        - *jjb_ini_ext
    <<: *gl_build_master

- job-template:
    id: 'gl-build-master-osio-scan'
    name: '{gl_group}-{gl_project}-gl-build-{branch}'
    publishers:
    - archive:
        artifacts: 'reports/**'
    <<: *gl_build_master

- job-template:
    id: 'gl-pr-check-jjb'
    name: '{gl_group}-{gl_project}-gl-pr-check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    publishers:
    - gitlab_message:
        <<: *gitlab_message_defaults
    - gitlab-notifier
    - archive:
        artifacts: 'reports/**'
        allow-empty: yes
    <<: *gl_pr_check

- job-template:
    id: pagerditty
    name: pagerditty
    node: '{node}'
    wrappers:
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *pd_api_key
    publishers:
    - archive:
        artifacts: 'report.txt'
        allow-empty: false
    parameters:
    - choice:
        name: USERNAME
        choices:
        - akonarde
        - jfchevrette
        - jmelis
        - maorfr
        - mmclane
        - pbergene
        - skryzhnii
    - bool:
        name: SCHEDULE_PRIMARY
        default: true
    - bool:
        name: SCHEDULE_SECONDARY
        default: true
    - string:
        name: START
        description: Format YYYY-MM-DD (needs leading zeroes)
    - string:
        name: DURATION
        default: "1"
        description: Duration (in duration units)
    - choice:
        name: DURATION_UNITS
        description: Unit of measure for the DURATION argument
        choices:
        - months
        - days
        - years
    builders:
    - shell: |
        #!/bin/bash

        if [[ $SCHEDULE_PRIMARY == false && $SCHEDULE_SECONDARY == false ]]; then
            echo "No schedule selected" >&2
            exit 1
        fi

        if ! echo "$START" | grep -qE "^20[0-9]{{2}}-[0-9]{{2}}-[0-9]{{2}}$"; then
            echo "Invalid START" >&2
            exit 1
        fi

        case $USERNAME in
            akonarde) PD_ID=PT28Z07 ;;
            jfchevrette) PD_ID=PW01TAV ;;
            jmelis) PD_ID=PD8AV28 ;;
            maorfr) PD_ID=PYPZ9FP ;;
            mmclane) PD_ID=P0JVQ4C ;;
            pbergene) PD_ID=PG6TPCW ;;
            skryzhnii) PD_ID=PYKHONG ;;
            *) echo "Invalid username" >&2 ; exit 1;;
        esac

        pd_schedule=""
        if $SCHEDULE_PRIMARY; then
            pd_schedule="--pd_schedule_id PHS3079"
        fi

        if $SCHEDULE_SECONDARY; then
            pd_schedule="$pd_schedule --pd_schedule_id PSTVSQD"
        fi

        docker run --rm quay.io/jakedt/pagerditty \
            --pd_api_key $PD_API_KEY \
            --pd_id $PD_ID \
            $pd_schedule \
            --start $START \
            --duration $DURATION \
            --durationunits $DURATION_UNITS > report.txt

- job-template:
    id: 'jenkins-slaves-cleanup'
    name: 'jenkins-slaves-cleanup'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *app_sre_bot_key
    builders:
    - shell: |
        trap "rm -f ${{WORKSPACE}}/ansible/app-sre-bot.key" EXIT SIGINT
        cd ansible
        echo ${{APP_SRE_BOT_KEY}} | base64 --decode > app-sre-bot.key
        chmod 0600 app-sre-bot.key
        eval `ssh-agent -s`
        ssh-add app-sre-bot.key
        ansible -u ${{APP_SRE_BOT_USERNAME}} --key-file app-sre-bot.key -m shell -a 'sudo /opt/clean-up-scripts/prune-docker-images.sh' ci-int-jenkins-slave,ci-ext-jenkins-slave,ci-ext-jenkins
        ansible -u ${{APP_SRE_BOT_USERNAME}} --key-file app-sre-bot.key -m shell -a 'sudo -u jenkins /opt/clean-up-scripts/prune-podman-images.sh' ci-int-jenkins-slave-uhc
    cron_expression: H */6 * * *
    <<: *gl_timed

- job-template:
    id: 'gl-build-master-ansible-bastion'
    name: 'gl-build-master-ansible-bastion'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *app_sre_bot_key
    builders:
    - shell: |
        trap "rm -f ${{WORKSPACE}}/ansible/app-sre-bot.key" EXIT SIGINT
        cd ansible
        echo ${{APP_SRE_BOT_KEY}} | base64 --decode > app-sre-bot.key
        chmod 0600 app-sre-bot.key
        eval `ssh-agent -s`
        ssh-add app-sre-bot.key
        ansible-playbook -u ${{APP_SRE_BOT_USERNAME}} --key-file app-sre-bot.key playbooks/ci-ext-jumphost-accounts.yml -CD
    <<: *gl_build_master


- job-template:
    id: 'clusterimageset-run'
    job_name: 'clusterimageset-run'
    name: '{job_name}'
    publishers:
    - git:
        push-merge: false
        push-only-if-success: true
        branches:
        - branch:
            name: "master"
    cron_expression: H/5 * * * *
    <<: *gl_timed

- job-template:
    id: 'gl-pr-check-clusterimagesets'
    name: '{gl_group}-{gl_project}-gl-pr-check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *app_sre_bot_key
        - *kube_config_hive_int
        - *kube_config_hive_stage
        - *kube_config_hive_stage_01
        - *kube_config_hive_prod
        - *slack_hook_url
    builders:
    - shell: |
        export JUMPHOST="ci.ext.devshift.net"
        export JUMPHOST_USER="$APP_SRE_BOT_USERNAME"
        export SSH_PRIVATE_KEY_B64="$APP_SRE_BOT_KEY"

        ./pr_check.sh
    <<: *gl_pr_check

- job-template:
    id: 'gitkeeper-run'
    name: 'gitkeeper-run'
    node: '{node}'
    environment: production
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *gitkeeper_toml
        - *gitlab_token
        - *app_interface_basic_auth
    cron_expression: H 4,18 * * *
    <<: *gh_timed

- job-template:
    id: 'gl-build-master-managed-tenants'
    name: '{gl_group}-{gl_project}-gl-build-{branch}-managed-tenants'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *app_sre_bot_key
        - *kube_config_hive_int
        - *kube_config_hive_stage
        - *kube_config_hive_stage_01
        - *kube_config_hive_prod
        - *quay_secret_push
        - *addons_flow_ocm_token
    builders:
    - shell: |
        export JUMPHOST="ci.ext.devshift.net"
        export JUMPHOST_USER="$APP_SRE_BOT_USERNAME"
        export SSH_PRIVATE_KEY_B64="$APP_SRE_BOT_KEY"
        export KUBE_SERVER="$KUBE_SERVER_HIVE_STAGE"
        export KUBE_TOKEN="$KUBE_TOKEN_HIVE_STAGE"

        TMP_DIR=$(mktemp -d -p .)
        trap "rm -rf $TMP_DIR" EXIT SIGINT

        export SSH_KEY_FILE="$TMP_DIR/id_rsa"
        echo "$SSH_PRIVATE_KEY_B64" | base64 -d > "$SSH_KEY_FILE"
        chmod 700 "$TMP_DIR"
        chmod 600 "$SSH_KEY_FILE"

        export DOCKER_CONF=$PWD/.docker
        mkdir -p $DOCKER_CONF
        echo "$QUAY_DOCKER_CONFIG_JSON" | base64 -d > $DOCKER_CONF/config.json

        ./build_deploy.sh
    <<: *gl_build_master

- job-template:
    id: 'gl-pr-check-managed-tenants'
    name: '{gl_group}-{gl_project}-gl-pr_check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *3scale_api
        - *addons_flow_ocm_token
        - *reconcile_toml
        - *kube_config_hive_int
        - *kube_config_hive_stage
        - *kube_config_hive_stage_01
        - *kube_config_hive_prod
    <<: *gl_pr_check
