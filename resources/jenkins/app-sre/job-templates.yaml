- job-template:
    id: 'gl-job-sos-report'
    name: '{gl_group}-{gl_project}-job-sos-report'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *hsd_gitlab_token
    publishers:
    - archive:
        artifacts: 'scripts/sos-report.html'
    builders:
    - shell: |
        cd scripts
        ./sos-issues.sh
        md=$(ls -rt sos-issues*md|tail -n1)
        pandoc sos-issues*md -o sos-report.html
    cron_expression: 0 9 * * 3
    <<: *gl_timed

- job-template:
    id: 'gl-job-workday-reminder'
    name: '{gl_group}-{gl_project}-job-workday-reminder'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *pd_api_key
        - *smtp
    builders:
    - shell: |
        python3 -m venv venv
        source venv/bin/activate
        pip3 install -r requirements.txt
        python3 workday-reminder.py
    cron_expression: 0 9 * * *
    <<: *gl_timed

- job-template:
    id: 'gl-build-master-osio-scan'
    name: '{gl_group}-{gl_project}-gl-build-{branch}'
    publishers:
    - archive:
        artifacts: 'reports/**'
    <<: *gl_build_master

- job-template:
    id: pagerditty
    name: pagerditty
    node: '{node}'
    wrappers:
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *pd_api_key
    publishers:
    - archive:
        artifacts: 'report.txt'
        allow-empty: false
    parameters:
    - choice:
        name: USERNAME
        choices:
        - akonarde
        - jfchevrette
        - jmelis
        - maorfr
        - pbergene
        - skryzhnii
    - bool:
        name: SCHEDULE_PRIMARY
        default: true
    - bool:
        name: SCHEDULE_SECONDARY
        default: true
    - string:
        name: START
        description: Format YYYY-MM-DD (needs leading zeroes)
    - string:
        name: DURATION
        default: "1"
        description: Duration (in duration units)
    - choice:
        name: DURATION_UNITS
        description: Unit of measure for the DURATION argument
        choices:
        - months
        - days
        - years
    builders:
    - shell: |
        #!/bin/bash

        if [[ $SCHEDULE_PRIMARY == false && $SCHEDULE_SECONDARY == false ]]; then
            echo "No schedule selected" >&2
            exit 1
        fi

        if ! echo "$START" | grep -qE "^20[0-9]{{2}}-[0-9]{{2}}-[0-9]{{2}}$"; then
            echo "Invalid START" >&2
            exit 1
        fi

        case $USERNAME in
            akonarde) PD_ID=PT28Z07 ;;
            jfchevrette) PD_ID=PW01TAV ;;
            jmelis) PD_ID=PD8AV28 ;;
            maorfr) PD_ID=PYPZ9FP ;;
            pbergene) PD_ID=PG6TPCW ;;
            skryzhnii) PD_ID=PYKHONG ;;
            *) echo "Invalid username" >&2 ; exit 1;;
        esac

        pd_schedule=""
        if $SCHEDULE_PRIMARY; then
            pd_schedule="--pd_schedule_id PHS3079"
        fi

        if $SCHEDULE_SECONDARY; then
            pd_schedule="$pd_schedule --pd_schedule_id PSTVSQD"
        fi

        docker run --rm quay.io/jakedt/pagerditty \
            --pd_api_key $PD_API_KEY \
            --pd_id $PD_ID \
            $pd_schedule \
            --start $START \
            --duration $DURATION \
            --durationunits $DURATION_UNITS > report.txt

- job-template:
    id: 'jenkins-workers-cleanup'
    name: 'jenkins-workers-cleanup'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *app_sre_bot_key
    builders:
    - shell: |
        trap "rm -f ${{WORKSPACE}}/ansible/app-sre-bot.key" EXIT SIGINT
        cd ansible
        echo ${{APP_SRE_BOT_KEY}} | base64 --decode > app-sre-bot.key
        chmod 0600 app-sre-bot.key
        eval `ssh-agent -s`
        ssh-add app-sre-bot.key
        ansible -u ${{APP_SRE_BOT_USERNAME}} --key-file app-sre-bot.key -m shell -a 'sudo /opt/clean-up-scripts/prune-docker-images.sh' ci-int-aws-jenkins-worker,ci-ext-jenkins-worker
        ansible -u ${{APP_SRE_BOT_USERNAME}} --key-file app-sre-bot.key -m shell -a 'sudo -i -u jenkins /opt/clean-up-scripts/prune-podman-images.sh' ci-int-aws-jenkins-worker-uhc,ci-ext-jenkins-worker-rhel8,ci-int-aws-jenkins-worker-rhel8
    cron_expression: H */3 * * *
    <<: *gl_timed

- job-template:
    id: 'jenkins-workers-subscription-manager-refresh'
    name: 'jenkins-workers-subscription-manager-refresh'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *app_sre_bot_key
    builders:
    - shell: |
        trap "rm -f ${{WORKSPACE}}/ansible/app-sre-bot.key" EXIT SIGINT
        cd ansible
        echo ${{APP_SRE_BOT_KEY}} | base64 --decode > app-sre-bot.key
        chmod 0600 app-sre-bot.key
        eval `ssh-agent -s`
        ssh-add app-sre-bot.key
        ansible -u ${{APP_SRE_BOT_USERNAME}} --key-file app-sre-bot.key --forks=1 -m shell -a '/opt/clean-up-scripts/subscription-manager-refresh.sh' -b ci-int-aws-jenkins-worker-rhel7,ci-int-aws-jenkins-worker-rhel8,ci-ext-jenkins-worker-rhel7,ci-ext-jenkins-worker-rhel8
    cron_expression: H 2 * * *
    <<: *gl_timed

- job-template:
    id: 'gl-build-master-ansible-playbook'
    name: 'gl-build-master-ansible-playbook-{playbookname}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *app_sre_bot_key
        - *ansible-reader-role-creds
    builders:
    - shell: |
        trap "rm -f ${{WORKSPACE}}/ansible/app-sre-bot.key" EXIT SIGINT
        cd ansible
        echo ${{APP_SRE_BOT_KEY}} | base64 --decode > app-sre-bot.key
        chmod 0600 app-sre-bot.key
        eval `ssh-agent -s`
        ssh-add app-sre-bot.key
        export REQUESTS_CA_BUNDLE="/etc/pki/tls/cert.pem"
        ansible-playbook -u ${{APP_SRE_BOT_USERNAME}} --key-file app-sre-bot.key '{playbook}' -D
    <<: *gl_build_master

- job-template:
    id: 'jenkins-worker-housekeeping'
    name: 'jenkins-worker-housekeeping-{tagname}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *app_sre_bot_key
        - *ansible-reader-role-creds
        - *ansible-ec2-inventory
    builders:
    - shell: |
        trap "rm -f ${{WORKSPACE}}/ansible/app-sre-bot.key" EXIT SIGINT
        cd ansible
        echo ${{APP_SRE_BOT_KEY}} | base64 --decode > app-sre-bot.key
        chmod 0600 app-sre-bot.key
        eval `ssh-agent -s`
        ssh-add app-sre-bot.key
        export REQUESTS_CA_BUNDLE="/etc/pki/tls/cert.pem"
        ansible-playbook -u ${{APP_SRE_BOT_USERNAME}} --key-file app-sre-bot.key -i hosts/aws_ec2.yaml playbooks/jenkins-worker-housekeeping.yml --tags '{tagname}' -v -D
    <<: *gl_build_master

- job-template:
    id: 'jenkins-worker-housekeeping-timed'
    name: 'jenkins-worker-housekeeping-timed-{tagname}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *app_sre_bot_key
        - *ansible-reader-role-creds
        - *ansible-ec2-inventory
    builders:
    - shell: |
        trap "rm -f ${{WORKSPACE}}/ansible/app-sre-bot.key" EXIT SIGINT
        cd ansible
        echo ${{APP_SRE_BOT_KEY}} | base64 --decode > app-sre-bot.key
        chmod 0600 app-sre-bot.key
        eval `ssh-agent -s`
        ssh-add app-sre-bot.key
        export REQUESTS_CA_BUNDLE="/etc/pki/tls/cert.pem"
        ansible-playbook -u ${{APP_SRE_BOT_USERNAME}} --key-file app-sre-bot.key -i hosts/aws_ec2.yaml playbooks/jenkins-worker-housekeeping.yml --tags '{tagname}' -v -D
    cron_expression: H */2 * * *
    <<: *gl_timed

- job-template:
    id: 'jenkins-worker-housekeeping-update-host'
    job_name: 'jenkins-worker-housekeeping-update-host'
    name: '{job_name}'
    commands: ''
    wrappers:
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *ansible-ec2-inventory
    publishers:
    - git:
        push-merge: false
        push-only-if-success: true
        branches:
        - branch:
            name: "master"
    cron_expression: H/5 * * * *
    <<: *gl_timed

- job-template:
    id: 'gl-build-master-infra'
    name: '{gl_group}-{gl_project}-gl-build-{branch}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *packer-account
        - *ansible-reader-role-creds
    <<: *gl_build_master

- job-template:
    id: 'gl-pr-check-infra'
    name: '{gl_group}-{gl_project}-gl-pr-check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *packer-account
        - *ansible-reader-role-creds
        - *gitlab_fork_compliance_reconcile_toml
    <<: *gl_pr_check

- job-template:
    id: 'clusterimageset-run'
    job_name: 'clusterimageset-run'
    name: '{job_name}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *clusterimageset_run_aws_credentials
        - *clusterimageset_run_prom_token
    publishers:
    - git:
        push-merge: false
        push-only-if-success: true
        branches:
        - branch:
            name: "master"
    cron_expression: H/10 * * * *
    <<: *gl_timed

- job-template:
    id: 'gl-pr-check-clusterimagesets'
    name: '{gl_group}-{gl_project}-gl-pr-check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *app_sre_bot_key
        - *kube_config_hive_stage_01
        - *kube_config_hive_prod
        - *slack_hook_url
    builders:
    - shell: |
        export JUMPHOST="ci.ext.devshift.net"
        export JUMPHOST_USER="$APP_SRE_BOT_USERNAME"
        export SSH_PRIVATE_KEY_B64="$APP_SRE_BOT_KEY"

        ./pr_check.sh
    <<: *gl_pr_check

- job-template:
    id: 'gitkeeper-run'
    name: 'gitkeeper-run'
    node: '{node}'
    environment: production
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *gitkeeper_toml
        - *gitlab_token
        - *app_interface_basic_auth
    cron_expression: H 4,18 * * *
    <<: *gh_timed

- job-template:
    id: 'sd-sos-notifier'
    job_name: 'sd-sos-notifier'
    name: 'sd-sos-notifier'
    branch: master
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *sd_sos
    <<: *gl_build_master

- job-template:
    id: 'gl-timed-sd-sos'
    name: 'sd-sos-cron'
    node: '{node}'
    environment: production
    branch: master
    cron_expression: '1 0 * * FRI'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *sd_sos
    builders:
        - shell: |
              python3 -m venv venv
              source venv/bin/activate
              pip3 install -r requirements.txt
              python3 weekly_data.py
    <<: *gl_timed
