- base_templates:
    name: ci-int-gitlab-base-templates

    gl_checkout: &gl_checkout
        branch: "master"
        node: '{node}'
        properties:
        - github:
            url: 'https://gitlab.cee.redhat.com/{gl_group}/{gl_project}.git'
        - gitlab:
            connection: 'gitlab cee'
        scm:
        - git:
            url: 'git@gitlab.cee.redhat.com:{gl_group}/{gl_project}.git'
            credentials-id: '{gitlab_ssh_credentials}'
            shallow_clone: true
            branches:
            - '{branch}'

    gl_build_master_template: &gl_build_master_template
        kube_cluster: ""
        kube_namespace: "error_no_ns"
        saasherder_context: ""
        saasherder_services: ""
        saas_git: ""
        build_deploy_script_path: "./build_deploy.sh"
        triggers:
        - gitlab:
            trigger-push: true
            trigger-merge-request: false
            trigger-open-merge-request-push: never
            add-note-merge-request: false
            add-ci-message: false
            set-build-description: true
            add-vote-merge-request: false
            trigger-note: false
            ci-skip: false
            wip-skip: false
            branch-filter-type: "NameBasedFilter"
            include-branches:
            - '{branch}'
        wrappers:
        - timeout_wrapper:
            timeout: '{timeout}'
        <<: *gl_checkout
        <<: *build_master_builder

    gl_pr_check_template: &gl_pr_check_template
        node: '{node}'
        pr_check_script_path: "./pr_check.sh"
        properties:
        - github:
            url: 'https://gitlab.cee.redhat.com/{gl_group}/{gl_project}.git'
        - gitlab:
            connection: 'gitlab cee'
        scm:
        - git:
            remotes:
            - 'origin':
                url: 'https://gitlab.cee.redhat.com/{gl_group}/{gl_project}.git'
                credentials-id: '{gitlab_ssh_credentials}'
                refspec: '+refs/heads/*:refs/remotes/origin/* +refs/merge-requests/*/head:refs/remotes/origin/merge-requests/*'
            branches:
            - 'merge-requests/${{gitlabMergeRequestIid}}'
            merge:
                remote: 'origin'
                branch: '${{gitlabTargetBranch}}'
        triggers:
        - gitlab:
            trigger-push: true
            trigger-merge-request: true
            trigger-open-merge-request-push: source
            note-regex: '(?ms).*^(\[test\]|\/retest)\s*$.*'
            set-build-description: true
            add-note-merge-request: true
            add-vote-merge-request: true
            add-ci-message: true
            allow-all-branches: true
            ci-skip: true
            wip-skip: true
        wrappers:
        - timeout_wrapper:
            timeout: '{timeout}'
        publishers:
        - gitlab_message
        - gitlab-notifier
        concurrent: '{concurrent_build}'
        builders:
        - shell: |
            {pr_check_script_path}

    gl_timed_template: &gl_timed_template
        ci_cmd: ./run.sh
        wrappers:
        - timeout_wrapper:
            timeout: '{timeout}'
        builders:
        - shell: |
            {ci_cmd}
        triggers:
        - timed: |
            {cron_expression}
        <<: *gl_checkout

    # This template is intended to create jobs that run the pipeline described
    # in the 'Jenkinsfile' of the project when changes are merged to the master
    # branch.
    gl_build_pipeline_template: &gl_build_pipeline_template
        project-type: pipeline
        pipeline-scm:
          scm:
          - git:
              url: 'git@gitlab.cee.redhat.com/{gl_group}/{gl_project}.git'
              credentials-id: '{gitlab_ssh_credentials}'
              shallow_clone: true
              branches:
              - '{branch}'
        triggers:
        - pollscm:
            cron: '* * * * *'
        wrappers:
        - timeout_wrapper:
            timeout: '{timeout}'
        <<: *gl_checkout

# Runs build_deploy.sh and deploys to staging
#
# vars required in the job definition:
# - gl_group: GitLab group
# - gl_project: GitLab repo
#
# optional vars
# - kube_cluster: cluster name
# - kube_namespace: Namespace to deploy to
# - saasherder_context: saasherder context declared in config.yaml
# - saasherder_services: space separated list of saasherder service names
# - saas_git: saas herder repo uri, should be public
# - image_pattern: Regex of the image path to check against
# - quay_org: name of the quay organisation
#
# optional secrets:
# The secret 'app-sre/creds/kube-configs/{kube_cluster}' must exist.
# The secret 'app-sre/quay/{quay_org}-push' must exist, with `user`, `token` and `config.json` keys.
- job-template:
    id: 'gl-build-master'
    name: '{gl_group}-{gl_project}-gl-build-{branch}'
    wrappers:
      - timeout_wrapper:
          timeout: '{timeout}'
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *kube_config
          - *quay_secret_push
          - *app_sre_bot_push_token
    <<: *gl_build_master_template

- job-template:
    id: 'gl-pr-check'
    name: '{gl_group}-{gl_project}-gl-pr-check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    <<: *gl_pr_check_template

- job-template:
    id: gl-build-master-with-upstream
    name: '{gl_group}-{gl_project}-gl-build-{branch}-upstream-{upstream}'
    branch: master
    upstream: ''
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *kube_config
        - *quay_secret_push
        - *app_sre_bot_push_token
    triggers:
    - reverse:
        jobs: '{upstream}'
        results: 'success'
    <<: *gl_build_master_template

# Deploys all the services defined in the saas repo
#
# vars required in the job definition:
# - gl_group: GitLab group
# - gl_project: GitLab repo
# - kube_cluster: cluster name
# - kube_namespace: Namespace to deploy to
# - image_pattern: Regex of the image path to check against
# - quay_org: name of the quay organisation
#
# Required secrets:
# The secret 'app-sre/creds/kube-configs/{kube_cluster}' must exist.
# The secret 'app-sre/quay/{quay_org}-pull' must exist, with `user`, `token` and `config.json` keys.
- job-template:
    id: 'saas-deploy'
    name: '{gl_group}-{gl_project}-{saasherder_context}-saas-deploy'
    dry_run: "no"
    repo_url: 'https://gitlab.cee.redhat.com/{gl_group}/{gl_project}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - workspace-cleanup
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *kube_config
        - *quay_secret_pull
    <<: *gl_build_master_template
    <<: *saasherder

# PR check for saas repos
#
# vars required in the job definition:
# - gl_group: GitLab group
# - gl_project: GitLab repo
# - kube_cluster: cluster name
# - kube_namespace: Namespace to deploy to
# - image_pattern: Regex of the image path to check against
#
# Required secrets:
# The secret 'app-sre/creds/kube-configs/{kube_cluster}' must exist.
# The secret 'app-sre/quay/{quay_org}-pull' must exist, with `user`, `token` and `config.json` keys.
- job-template:
    id: 'saas-pr-check'
    name: '{gl_group}-{gl_project}-{saasherder_context}-saas-pr-check'
    dry_run: "yes"
    repo_url: 'https://gitlab.cee.redhat.com/{gl_group}/{gl_project}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - workspace-cleanup
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *kube_config
        - *quay_secret_pull
    <<: *gl_pr_check_template
    <<: *saasherder

# Timed Job
#
# required vars:
# - gl_group: GitLab group
# - gl_project: GitLab repo
# - cron_expression: cron expression
#
# optional vars:
# - ci_cmd: the command to run. Defaults to `./run.sh`
- job-template:
    id: 'gl-timed'
    name: '{gl_group}-{gl_project}-timed'
    <<: *gl_timed_template
