- job-template:
    id: gl-pr-check-managed-services
    name: "{gl_group}-{gl_project}-gl-pr-check"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *app_interface_creds
            - *quay_secret_push
            - *ci_ocm_token
            - *ci_aws_keys
    <<: *gl_pr_check
    artifacts_path: 'test-results/**'
    publishers:
    - gitlab_message:
        <<: *gitlab_message_defaults
    - gitlab-notifier
    - archive:
        artifacts: '{artifacts_path}'
        allow-empty: true

- job-template:
    id: gl-build-master-managed-services
    name: "{gl_group}-{gl_project}-gl-build-{branch}"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *ci_jenkins_token
          - *gitlab_token
          - *backup_ecr_push_creds
          - *quay_secret_push
          - *app_sre_bot_push_token
          - *app_interface_creds
          - *managed_services_github_deploy_key
    <<: *gl_build_master

- job-template:
    id: managed-services-gl-build-test-branch
    name: "{gl_group}-{gl_project}-gl-build-test-{branch}"
    wrappers:
      - timeout_wrapper:
          timeout: 360
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *ci_jenkins_token
          - *gitlab_token
          - *backup_ecr_push_creds
          - *quay_secret_push
          - *app_sre_bot_push_token
          - *app_interface_creds
          - *managed_services_github_deploy_key
          - *ci_ocm_token
          - *ci_aws_keys
          - *ci_observatorium
          - *kas_fleetshard
          - *ci_cd_quay
    <<: *gl_build_master
    parameters:
    - bool:
        name: RELEASE
        default: '{release}'
        description: 'indicates release build'
    - bool:
        name: TEMP_CPAAS_BUILD
        default: 'true'
        description: 'whether to use scratch=true in CPaaS build'
    - bool:
        name: SKIP_BUILD
        default: 'false'
        description: 'true if you want to skip CPaaS build and use snapshot images defined in build_config.yaml for testing/releasing'
    - string:
        name: CPAAS_BUILD
        default: ''
        description: 'if you want to use existing CPaaS build (avoid triggering new build)'
    - bool:
        name: CLUSTER_CLEANUP
        default: 'true'
        description: 'include deletion of test cluster'
    publishers:
    - archive:
        artifacts: "{archive_artifacts}"
        allow-empty: true
    - junit:
        results: "{junit_results}"
    - postbuildscript:
        builders:
            - role: SLAVE
              build-on:
                - NOT_BUILT
                - ABORTED
                - FAILURE
              build-steps:
                - shell: "{cleanup_script}"

- job-template:
    id: mk-nightly-build-test-branch
    name: "{gl_group}-{gl_project}-gl-build-test-nightly-{branch}"
    wrappers:
      - timeout_wrapper:
          timeout: 360
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *ci_jenkins_token
          - *gitlab_token
          - *backup_ecr_push_creds
          - *quay_secret_push
          - *app_sre_bot_push_token
          - *app_interface_creds
          - *managed_services_github_deploy_key
          - *ci_ocm_token
          - *ci_aws_keys
          - *ci_observatorium
          - *kas_fleetshard
          - *ci_cd_quay
    <<: *gl_timed
    parameters:
    - hidden:
        name: RELEASE
        default: 'false'
        description: 'true = snapshot+release, false = nightly'
    - bool:
        name: SKIP_BUILD
        default: 'false'
        description: 'true if you want to skip CPaaS build and use snapshot images defined in build_config.yaml for testing/releasing'
    - string:
        name: CPAAS_BUILD
        default: ''
        description: 'if you want to use existing CPaaS build (avoid triggering new build)'
    - bool:
        name: CLUSTER_CLEANUP
        default: 'true'
        description: 'include deletion of test cluster'
    publishers:
    - archive:
        artifacts: "{archive_artifacts}"
        allow-empty: true
    - junit:
        results: "{junit_results}"
    - postbuildscript:
        builders:
            - role: SLAVE
              build-on:
                - NOT_BUILT
                - ABORTED
                - FAILURE
              build-steps:
                - shell: "{cleanup_script}"
                
- job-template:
    id: managed-services-pull-upstream
    name: 'managed-services-pull-upstream'
    description: "[managed-services] pull changes from all upstreams specified in {gl_group}/{gl_project}/script/repo-config.yaml"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *app_sre_bot_push_token
            - *managed_services_github_deploy_key
    publishers:
      - <<: *slack_notify
    <<: *gl_timed
    
    
- job-template:   
    id: 'managed-kafka-performance'
    name: 'managed-kafka-performance-{mk_perf_type}'
    wrappers:
    - timestamps
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *ci_ocm_token
        - *ci_aws_keys
        - *ci_observatorium
    parameters:
    - string:
        name: TESTCASE
        default: '{mk_perf_test}'
        description: 'maven parameter for executing specific tests'
    - string:
        name: KAFKA_WORKER_COUNT
        default: '17'
        description: 'count of worker nodes for kafka cluster'
    - string:
        name: OMB_WORKER_COUNT
        default: '10'
        description: 'count of worker nodes for OMB cluster'
    - string:
        name: OMB_TEST_DURATION
        default: 'PT1M'
        description: 'OMB test duration in minutes, minimum 1 min'
    - string:
        name: OMB_WARMUP_DURATION
        default: 'PT1M'
        description: 'OMB warmup duration in minutes, minimum 1 min'
    - string:
        name: FLAVOR
        default: 'm5.4xlarge'
        description: 'OSD aws node flavor'
    - string:
        name: REGION
        default: 'us-east-2'
        description: 'OSD aws region'
    - string:
        name: MULTI_AZ
        default: 'false'
        description: 'aws multi availablility for osd cluster'
    - string:
        name: OMB_COLLECT_LOG
        default: 'true'
        description: 'collect logs from OMB framework'
    <<: *gl_checkout
    builders:
      - shell: "make ci/pipeline"
    publishers:
    - archive:
        artifacts: 'target/logs/**,target/surefire-reports/**'
        allow-empty: true
    - junit:
        results: 'target/surefire-reports/*.xml'
    - <<: *slack_notify
    - postbuildscript:
        builders:
            - role: SLAVE
              build-on:
                - NOT_BUILT
                - ABORTED
                - FAILURE
              build-steps:
                - shell: "make ci/pipeline/cleanup"

- job-template:
    id: managed-services-security-scan
    name: "{gl_project}-security-scan-{branch}"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *mk_security_scan_token
    <<: *gl_timed
    publishers:
    - archive:
        artifacts: 'logs/*.txt'
        allow-empty: true
    - <<: *slack_notify

- job-template:
    id: managed-kafka-chaos
    name: "managed-kafka-chaos"
    wrappers:
      - timestamps
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
    parameters:
    - string:
        name: OSD_CLUSTER_API
        default: ''
        description: '[REQUIRED] api server of the osd cluster hosting the managed kafka service'
    - password:
        name: OSD_API_TOKEN
        default: ''
        description: '[REQUIRED] kubeadmin token for osd cluster'
    <<: *gh_checkout
    builders:
      - shell: |
          oc login --server=$OSD_CLUSTER_API --token=$OSD_API_TOKEN --insecure-skip-tls-verify
          cd install
          make test/chaos
    artifacts_path: 'chaos-results/**'
    publishers:
    - archive:
        artifacts: '{artifacts_path}'
        allow-empty: true
    - <<: *slack_notify

- job-template:
    id: managed-kafka-litmus-test-run
    name: "managed-kafka-litmus-test-run"
    wrappers:
      - timestamps
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
    parameters:
    - string:
        name: OSD_CLUSTER_API
        default: ''
        description: '[REQUIRED] api server of the osd cluster hosting the managed kafka service'
    - password:
        name: OSD_API_TOKEN
        default: ''
        description: '[REQUIRED] kubeadmin token for osd cluster'
    - bool:
        name: INSTALL_LITMUS
        default: False
        description: 'Select if you want to install Litmus and run Litmus test. KAFKA must be selected if not already installed on the cluster'
    - choice:
        name: LITMUS_TEST
        description: '[REQUIRED] The litmus test you want to run. You need to specify which'
        choices:
          - chaosengine/pod-delete-brokers
          - chaosengine/az-down
          - chaosschedule/pod-delete-brokers
          - chaosschedule/pod-delete-zookeepers
    <<: *gh_checkout
    builders:
      - shell: |
          ./install/resources/testing-chaos/scripts/run-litmus-test.sh
    artifacts_path: 'litmus-results/**'
    publishers:
    - archive:
        artifacts: '{artifacts_path}'
        allow-empty: true

- job-template:
    id: strimzi-operator-test
    name: "strimzi-operator-test"
    wrappers: 
    - timestamps
    - timeout_wrapper:
        timeout: "{timeout}"
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
          - *app_interface_creds
          - *quay_secret_push
          - *ci_ocm_token
          - *ci_aws_keys
    parameters:
    - choice:
        name: TEST_GROUP
        choices:
          - acceptance
          - regression
          - smoke
          - acceptance,regression
          - acceptance,smoke
          - regression,smoke
          - acceptance,regression,smoke
        description: 'Select the test-group to be executed'
    - string:
        name: EXCLUDED_GROUPS
        default: 'loadbalancer,nodeport,connectcomponents,connectoperator,mirrormaker,bridge,cruisecontrol'
        description: 'Mention the test-group to be skipped'
    - string:
        name: OSD_CLUSTER_NAME
        default: 'sob-test-$BUILD_NUMBER'
        description: 'Name of the cluster to be provisioned'
    <<: *gl_checkout
    builders: 
    - shell: ./pr_check.sh
    artifacts_path: 'test-results/**'
    publishers:
    - archive:
        artifacts: '{artifacts_path}'
        allow-empty: true

- job-template:
    id: 'gl-build-master-strimzi'
    name: '{gl_group}-{gl_project}-gl-build-{branch}'
    wrappers:
        - vault-secrets:
            <<: *vault_defaults
            secrets:
            - *ci_jenkins_token
            - *gitlab_token
    <<: *gl_build_master

- job-template:
    id: 'kas-fleet-manager-tests'
    name: 'kas-fleet-manager-tests-stage'
    publishers:
    - <<: *slack_notify
    wrappers:
      - timeout_wrapper:
          timeout: '{timeout}'
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *kas_fleet_manager_int_tests
            - *quay_secret_pull
    <<: *gl_timed

- job-template:
    id: 'kas-fleet-manager-cluster-extension'
    name: 'kas-fleet-manager-cluster-extension'
    publishers:
    - <<: *slack_notify
    wrappers:
      - timeout_wrapper:
          timeout: '{timeout}'
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *managed_services_cluster_extension
    <<: *gl_timed

- job-template:
    id: 'managed-services-sso-cluster-extension'
    name: 'managed-services-sso-cluster-extension'
    publishers:
    - <<: *slack_notify
    wrappers:
      - timeout_wrapper:
          timeout: '{timeout}'
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *managed_services_sso_cluster_extension
    <<: *gh_timed

- job-template:
    id: gl-pr-check-apache-kafka
    name: "{gl_group}-{gl_project}-gl-pr-check"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *app_interface_creds
            - *quay_secret_push
            - *ci_ocm_token
            - *ci_aws_keys
    <<: *gl_pr_check
    artifacts_path: 'clients/build/reports/tests/unitTest/*.html'
    publishers:
    - gitlab_message:
        <<: *gitlab_message_defaults
    - gitlab-notifier
    - archive:
        artifacts: '{artifacts_path}'
        allow-empty: true

- job-template:
    id: managed-kafka-e2e-test-suite
    name: managed-kafka-e2e-test-suite-staging
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *mk_e2e_test_suite_staging
    ci_cmd: './pipeline.sh'
    <<: *gl_timed
    publishers:
    - archive:
        artifacts: 'test-results/**'
        allow-empty: true

- job-template:
    id: managed-kafka-e2e-test-suite-sandbox
    name: managed-kafka-e2e-test-suite-sandbox
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *mk_e2e_test_suite_sandbox
    ci_cmd: 'PROFILE=sandbox ./pipeline.sh'
    <<: *gl_timed
    publishers:
    - archive:
        artifacts: 'test-results/**'
        allow-empty: true

- job-template:
    id: managed-kafka-promote-ui
    name: managed-kafka-promote-ui
    wrappers: 
    - timestamps
    - timeout_wrapper:
        timeout: "{timeout}"
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
          - *managed_services_github_deploy_key
    parameters:
    - string:
        name: REPOSITORIES
        default: 'https://github.com/RedHatInsights/rhosak-dashboard-build;https://github.com/RedHatInsights/rhoas-guides-build;https://github.com/RedHatInsights/rhosak-control-plane-ui-build;https://github.com/RedHatInsights/rhosak-data-plane-ui-build'
        description: 'All repositories to promote'
    - string:
        name: FROM_BRANCH
        default: qa-beta
    - string:
        name: TO_BRANCH
        default: prod-beta
    - string:
        name: AUTHOR_NAME
        default: Bot
    - string:
        name: AUTHOR_EMAIL
        default: ms-devexp@redhat.com
    - bool:
        name: DRY_RUN
        default: true
        description: If true the changes are not pushed
    <<: *gl_checkout
    builders: 
    - shell: ./script/promote-ui.sh

- job-template:
    id: mas-sso-build-template
    name: "{gl_group}-{gl_project}-gl-build-{branch}"
    description: "mass-sso build template"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *rhoas-quay-access
            - *app_sre_bot_push_token
#    publishers:
#      - <<: *slack_notify
    <<: *gl_build_master

- job-template:
    id: gl-build-master-kas-fleet-manager
    name: "{gl_group}-{gl_project}-gl-build-{branch}"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *quay_secret_push
          - *rhoas-quay-access
          - *kas_fleet_manager_pr_check
    <<: *gl_build_master

- job-template:
    id: gl-pr-check-kas-fleet-manager
    name: "{gl_group}-{gl_project}-gl-pr-check"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *quay_secret_push
          - *rhoas-quay-access
          - *kas_fleet_manager_pr_check
    <<: *gl_pr_check
        
- job-template:
    id: 'gl-pr-check-mas-sso'
    name: '{gl_group}-{gl_project}-gl-pr-check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *rhoas-quay-access
    <<: *gl_pr_check
