- job-template:
    id: gl-pr-check-managed-services
    name: "{gl_group}-{gl_project}-gl-pr-check"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *app_interface_creds
            - *quay_secret_push
            - *ci_ocm_token
            - *ci_aws_keys
    <<: *gl_pr_check
    artifacts_path: 'test-results/**'
    publishers:
    - gitlab_message:
        <<: *gitlab_message_defaults
    - gitlab-notifier
    - archive:
        artifacts: '{artifacts_path}'
        allow-empty: true

- job-template:
    id: gl-build-master-managed-services
    name: "{gl_group}-{gl_project}-gl-build-{branch}"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *ci_jenkins_token
          - *gitlab_token
          - *backup_ecr_push_creds
          - *quay_secret_push
          - *app_sre_bot_push_token
          - *app_interface_creds
          - *managed_services_github_deploy_key
          - *rhoas-quay-access
    <<: *gl_build_master

- job-template:
    id: managed-services-gl-build-test-branch
    name: "{gl_group}-{gl_project}-gl-build-test-{branch}"
    wrappers:
      - timeout_wrapper:
          timeout: 360
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *ci_jenkins_token
          - *gitlab_token
          - *backup_ecr_push_creds
          - *quay_secret_push
          - *app_sre_bot_push_token
          - *app_interface_creds
          - *managed_services_github_deploy_key
          - *ci_ocm_token
          - *ci_aws_keys
          - *ci_observatorium
          - *ci_cd_quay
          - *mk_e2e_test_suite_staging
    <<: *gl_build_master
    parameters:
    - bool:
        name: RELEASE
        default: '{release}'
        description: 'indicates release build'
    - bool:
        name: TEMP_CPAAS_BUILD
        default: 'true'
        description: 'whether to use scratch=true in CPaaS build'
    - bool:
        name: SKIP_BUILD
        default: 'false'
        description: 'true if you want to skip CPaaS build and use snapshot images defined in build_config.yaml for testing/releasing'
    - string:
        name: CPAAS_BUILD
        default: ''
        description: 'if you want to use existing CPaaS build (avoid triggering new build)'
    - bool:
        name: CLUSTER_CLEANUP
        default: 'true'
        description: 'include deletion of test cluster'
    publishers:
    - archive:
        artifacts: "{archive_artifacts}"
        allow-empty: true
    - junit:
        results: "{junit_results}"
    - postbuildscript:
        builders:
            - role: SLAVE
              build-on:
                - NOT_BUILT
                - ABORTED
                - FAILURE
              build-steps:
                - shell: "{cleanup_script}"

- job-template:
    id: mk-nightly-build-test-branch
    name: "{gl_group}-{gl_project}-gl-build-test-nightly-{branch}"
    wrappers:
      - timeout_wrapper:
          timeout: 360
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *ci_jenkins_token
          - *gitlab_token
          - *backup_ecr_push_creds
          - *quay_secret_push
          - *app_sre_bot_push_token
          - *app_interface_creds
          - *managed_services_github_deploy_key
          - *ci_ocm_token
          - *ci_aws_keys
          - *ci_observatorium
          - *ci_cd_quay
          - *mk_e2e_test_suite_staging
    <<: *gl_timed
    publishers:
    - archive:
        artifacts: "{archive_artifacts}"
        allow-empty: true
    - junit:
        results: "{junit_results}"
    - postbuildscript:
        builders:
            - role: SLAVE
              build-on:
                - NOT_BUILT
                - ABORTED
                - FAILURE
              build-steps:
                - shell: "{cleanup_script}"
                
- job-template:
    id: managed-services-pull-upstream
    name: 'managed-services-pull-upstream'
    description: "[managed-services] pull changes from all upstreams specified in {gl_group}/{gl_project}/script/repo-config.yaml"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *app_sre_bot_push_token
            - *managed_services_github_deploy_key
    publishers:
      - <<: *slack_notify
    <<: *gl_timed
    
    
- job-template:   
    id: 'managed-kafka-performance'
    name: 'managed-kafka-performance-{mk_perf_type}'
    wrappers:
    - timestamps
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *ci_ocm_token
        - *ci_aws_keys
        - *ci_observatorium
    parameters:
    - string:
        name: TESTCASE
        default: '{mk_perf_test}'
        description: 'maven parameter for executing specific tests'
    - string:
        name: KAFKA_WORKER_COUNT
        default: '17'
        description: 'count of worker nodes for kafka cluster'
    - string:
        name: OMB_WORKER_COUNT
        default: '10'
        description: 'count of worker nodes for OMB cluster'
    - string:
        name: OMB_TEST_DURATION
        default: 'PT1M'
        description: 'OMB test duration in minutes, minimum 1 min'
    - string:
        name: OMB_WARMUP_DURATION
        default: 'PT1M'
        description: 'OMB warmup duration in minutes, minimum 1 min'
    - string:
        name: FLAVOR
        default: 'm5.4xlarge'
        description: 'OSD aws node flavor'
    - string:
        name: REGION
        default: 'us-east-2'
        description: 'OSD aws region'
    - string:
        name: MULTI_AZ
        default: 'false'
        description: 'aws multi availablility for osd cluster'
    - string:
        name: OMB_COLLECT_LOG
        default: 'true'
        description: 'collect logs from OMB framework'
    <<: *gl_checkout
    builders:
      - shell: "make ci/pipeline"
    publishers:
    - archive:
        artifacts: 'target/logs/**,target/surefire-reports/**'
        allow-empty: true
    - junit:
        results: 'target/surefire-reports/*.xml'
    - <<: *slack_notify
    - postbuildscript:
        builders:
            - role: SLAVE
              build-on:
                - NOT_BUILT
                - ABORTED
                - FAILURE
              build-steps:
                - shell: "make ci/pipeline/cleanup"

- job-template:
    id: managed-services-security-scan
    name: "{gl_project}-security-scan-{branch}"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *mk_security_scan_token
    <<: *gl_timed
    publishers:
    - archive:
        artifacts: 'logs/*.txt'
        allow-empty: true
    - <<: *slack_notify

- job-template:
    id: managed-kafka-fault-tests
    name: "managed-kafka-fault-tests"
    wrappers:
      - timestamps
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *ci_ocm_token
            - *ci_aws_keys
            - *managed_services_github_deploy_key
    parameters: 
    - string:
        name: BRANCH
        default: '{default_branch}'
        description: 'The branch of kas-fault-tests repo you want to run the pipeline against. Defaults to main'
    - choice:
        name: OCM_CLUSTER_REGION
        description: '[REQUIRED] AWS region for the OSD cluster. If executing cloud layer tests, ensure that the cluster is in a region where no other clusters are deployed'
        choices:
            - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2
            - ap-south-1
            - ap-northeast-1
            - ap-northeast-2
            - ap-northeast-3
            - ap-southeast-1
            - ap-southeast-2
            - ca-central-1
            - eu-central-1
            - eu-west-1
            - eu-west-2
            - eu-west-3
            - eu-north-1
            - sa-east-1
    - string:
        name: OCM_CLUSTER_NAME
        default: ''
        description: 'OSD cluster name (if not defined, a random name will be set), max name length is 14 characters'
    - string:
        name: COMPUTE_NODES_COUNT
        default: '3'
        description: '[REQUIRED] OSD worker nodes for kafka cluster. If you select multi-az you must have a multiple of 3 for COMPUTE_NODES_COUNT'
    - bool:
        name: MULTI_AZ
        default: false
        description: If true the cluster will be provisioned with multiple AZ, if false for only one AZ.
    - bool:
        name: PROVISION_CLUSTER
        default: true
        description: If true a cluster will be provisioned. Set to false if you already have a cluster provisioned.
    - bool:
        name: DEPROVISION_CLUSTER
        default: true
        description: If true the provisioned or provided cluster will be deleted.
    - bool:
        name: INSTALL_KAFKA
        default: true
        description: If true a kafka instance will be installed in the cluster
    - choice:
        name: TEST_LAYER
        description: '[REQUIRED] Select the set of tests to be executed'
        choices:
          - all
          - cloud
          - openshift
          - kafka
          - none
    branch: '${{BRANCH}}'
    <<: *gh_checkout
    builders:
      - shell: |
          ./pipeline/fault_pipeline.sh
    artifacts_path: 'fault-results/**,pipeline/delorean/ocm/**'
    publishers:
    - archive:
        artifacts: '{artifacts_path}'
        allow-empty: true
    - <<: *slack_notify
- job-template:
    id: strimzi-operator-test
    name: "strimzi-operator-test"
    wrappers: 
    - timestamps
    - timeout_wrapper:
        timeout: "{timeout}"
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
          - *app_interface_creds
          - *quay_secret_push
          - *ci_ocm_token
          - *ci_aws_keys
    parameters:
    - choice:
        name: TEST_GROUP
        choices:
          - acceptance
          - regression
          - smoke
          - acceptance,regression
          - acceptance,smoke
          - regression,smoke
          - acceptance,regression,smoke
        description: 'Select the test-group to be executed'
    - string:
        name: EXCLUDED_GROUPS
        default: 'loadbalancer,nodeport,connectcomponents,connectoperator,mirrormaker,bridge,cruisecontrol'
        description: 'Mention the test-group to be skipped'
    - string:
        name: OSD_CLUSTER_NAME
        default: 'sob-test-$BUILD_NUMBER'
        description: 'Name of the cluster to be provisioned'
    <<: *gl_checkout
    builders: 
    - shell: ./pr_check.sh
    artifacts_path: 'test-results/**'
    publishers:
    - archive:
        artifacts: '{artifacts_path}'
        allow-empty: true

- job-template:
    id: 'gl-build-master-strimzi'
    name: '{gl_group}-{gl_project}-gl-build-{branch}'
    wrappers:
        - vault-secrets:
            <<: *vault_defaults
            secrets:
            - *ci_jenkins_token
            - *gitlab_token
    <<: *gl_build_master

- job-template:
    id: 'kas-fleet-manager-tests'
    name: 'kas-fleet-manager-tests-stage'
    publishers:
    - <<: *slack_notify
    wrappers:
      - timeout_wrapper:
          timeout: '{timeout}'
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *kas_fleet_manager_int_tests
            - *quay_secret_pull
    <<: *gl_timed

- job-template:
    id: kas-fleet-manager-perf-test
    name: kas-fleet-manager-perf-test-stage
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *kas_fleet_manager_perf_test_stage
    ci_cmd: './perf_test.sh'
    <<: *gl_timed
    publishers:
    - archive:
        artifacts: 'test/performance/reports/**'
        allow-empty: true

- job-template:
    id: gl-pr-check-apache-kafka
    name: "{gl_group}-{gl_project}-gl-pr-check"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *app_interface_creds
            - *quay_secret_push
            - *ci_ocm_token
            - *ci_aws_keys
    <<: *gl_pr_check
    artifacts_path: 'clients/build/reports/tests/unitTest/*.html'
    publishers:
    - gitlab_message:
        <<: *gitlab_message_defaults
    - gitlab-notifier
    - archive:
        artifacts: '{artifacts_path}'
        allow-empty: true

- job-template:
    id: managed-kafka-e2e-test-suite
    name: managed-kafka-e2e-test-suite-staging
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *mk_e2e_test_suite_staging
    ci_cmd: './pipeline.sh'
    <<: *gl_timed
    publishers:
    - archive:
        artifacts: 'test-results/**'
        allow-empty: true

- job-template:
    id: managed-kafka-e2e-test-suite-sandbox
    name: managed-kafka-e2e-test-suite-sandbox
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *mk_e2e_test_suite_sandbox
    ci_cmd: 'PROFILE=sandbox ./pipeline.sh'
    <<: *gl_timed
    publishers:
    - archive:
        artifacts: 'test-results/**'
        allow-empty: true

- job-template:
    id: managed-kafka-promote-ui
    name: managed-kafka-promote-ui
    wrappers:
    - timestamps
    - timeout_wrapper:
        timeout: "{timeout}"
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
          - *managed_services_github_deploy_key
    parameters:
    - bool:
        name: DRY_RUN
        default: true
        description: If true the changes are not pushed
    builders:
    - trigger-builds:
      - project:
          - "managed-kafka-promote-ui-stable"
          - "managed-kafka-promote-ui-beta"
        current-parameters: true

- job-template:
    id: managed-kafka-promote-ui-beta
    name: managed-kafka-promote-ui-beta
    wrappers:
    - timestamps
    - timeout_wrapper:
        timeout: "{timeout}"
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
          - *managed_services_github_deploy_key
    parameters:
    - string:
        name: REPOSITORIES
        default: 'https://github.com/RedHatInsights/rhosak-dashboard-build;https://github.com/RedHatInsights/rhoas-guides-build;https://github.com/RedHatInsights/rhosak-control-plane-ui-build;https://github.com/RedHatInsights/rhosak-data-plane-ui-build'
        description: 'All repositories to promote'
    - string:
        name: FROM_BRANCH
        default: qa-beta
    - string:
        name: TO_BRANCH
        default: prod-beta
    - string:
        name: AUTHOR_NAME
        default: Bot
    - string:
        name: AUTHOR_EMAIL
        default: ms-devexp@redhat.com
    - bool:
        name: DRY_RUN
        default: true
        description: If true the changes are not pushed
    <<: *gl_checkout
    builders:
    - shell: ./script/promote-ui.sh

- job-template:
    id: managed-kafka-promote-ui-stable
    name: managed-kafka-promote-ui-stable
    wrappers:
    - timestamps
    - timeout_wrapper:
        timeout: "{timeout}"
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
          - *managed_services_github_deploy_key
    parameters:
    - string:
        name: REPOSITORIES
        default: 'https://github.com/RedHatInsights/rhosak-dashboard-build'
        description: 'All repositories to promote'
    - string:
        name: FROM_BRANCH
        default: prod-beta
    - string:
        name: TO_BRANCH
        default: prod-stable
    - string:
        name: AUTHOR_NAME
        default: Bot
    - string:
        name: AUTHOR_EMAIL
        default: ms-devexp@redhat.com
    - bool:
        name: DRY_RUN
        default: true
        description: If true the changes are not pushed
    <<: *gl_checkout
    builders:
    - shell: ./script/promote-ui.sh

- job-template:
    id: mas-sso-build-template
    name: "{gl_group}-{gl_project}-gl-build-{branch}"
    description: "mass-sso build template"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *rhoas-quay-access
            - *app_sre_bot_push_token
#    publishers:
#      - <<: *slack_notify
    <<: *gl_build_master

- job-template:
    id: gl-build-main-kas-fleet-manager
    name: "{gl_group}-{gl_project}-gl-build-{branch}"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *quay_secret_push
          - *rhoas-quay-access
          - *kas_fleet_manager_pr_check
    <<: *gl_build_master

- job-template:
    id: gl-pr-check-kas-fleet-manager
    name: "{gl_group}-{gl_project}-gl-pr-check"
    wrappers:
      - timeout_wrapper:
          timeout: "{timeout}"
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *quay_secret_push
          - *rhoas-quay-access
          - *kas_fleet_manager_pr_check
    <<: *gl_pr_check
        
- job-template:
    id: 'gl-pr-check-mas-sso'
    name: '{gl_group}-{gl_project}-gl-pr-check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *rhoas-quay-access
    <<: *gl_pr_check
