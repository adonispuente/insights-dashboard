- defaults:
    name: global
    timeout: '15m'
    jobdescription: "Managed by Jenkins Job Builder, do not edit manually! Update via https://gitlab.cee.redhat.com/service/app-interface"
    git_organization: fabric8-services
    github_user: almighty-bot
    github_hooks: true
    branch: master
    discarder_days: -1
    discarder_num: -1
    build_branch: master
    manifest_bouncer_tag: d21c96f
    trigger_phrase: '.*\[test\].*'
    che-success-message: ""
    che-failure-message: ""
    che-error-message: ""
    kubeconfver: none
    sa_name: app-sre-bot

- admin_list_defaults: &admin_list_defaults
    name: 'admin_list_defaults'
    admin-list:
        - aditya-konarde
        - akurinnoy
        - alexeykazakov
        - amisevsk
        - andrewazores
        - aptmac
        - aslakknutsen
        - baijum
        - bartoszmajsak
        - chmouel
        - chrislessard
        - christianvogt
        - davidfestal
        - deepak1725
        - dgutride
        - DhritiShikhar
        - dlabrecq
        - dmytro-ndp
        - ebaron
        - edewit
        - evidolob
        - fabric8cd
        - fche
        - gastaldi
        - ia3andy
        - ibuziuk
        - inoxx03
        - invincibleJai
        - jfchevrette
        - jiekang
        - jmelis
        - joshuawilson
        - Katka92
        - kbsingh
        - khrm
        - l0rd
        - ldimaggi
        - ljelinkova
        - maorfr
        - MatousJobanek
        - maxandersen
        - michaelkleinhenz
        - msrb
        - neugens
        - nimishamukherjee
        - pbergene
        - piyush-garg
        - pmacik
        - ppitonak
        - Preeticp
        - quintesse
        - RhCheGithubBot
        - rhopp
        - rkratky
        - rohitkrai03
        - rohanKanojia
        - rupalibehera
        - sahil143
        - sanketpathak
        - sawood14012
        - sbose78
        - sbryzak
        - ScrewTSW
        - skabashnyuk
        - skryzhny
        - sthaha
        - stooke
        - tisnik
        - tradej
        - tsmaeder
        - vikram-raj
        - vparfonov
        - xcoulon
        - dgpatelgit
        - jparsai

- github_pull_request_defaults: &github_pull_request_defaults
    name: 'github_pull_request_defaults'
    <<: *admin_list_defaults
    cron: '* * * * *'
    github-hooks: '{github_hooks}'
    trigger-phrase: '.*\[test\].*'
    permit-all: false
    allow-whitelist-orgs-as-admins: true
    status-context: "ci.centos.org PR build"

- trigger:
    name: githubprb
    triggers:
      - github-pull-request:
          <<: *github_pull_request_defaults

- scm:
    name: git-scm
    scm:
        - git:
            credentials-id: "c4872223-4024-4cd4-8e09-1bbdc7d6e971"
            url: "{git_url}"
            skip-tag: True
            git-tool: ci-git
            refspec: '+refs/pull/*:refs/remotes/origin/pr/*'
            branches:
                - '${{ghprbActualCommit}}'
            basedir: '{git_basedir}'

- vault_defaults: &vault_defaults
    name: 'vault_defaults'
    vault-url: 'https://vault.devshift.net'
    credentials-id: 'approle-devtoolsche'

- kube-config-dsaas-stg: &kube-config-dsaas-stg
    name: "kube-config-dsaas-stg"
    secret-path: 'app-sre/creds/kube-configs/app-sre-stage-02'
    secret-values:
      - env-var: 'KUBE_SERVER'
        vault-key: 'server'
      - env-var: 'KUBE_TOKEN'
        vault-key: 'token'

- kube-config-dsaas: &kube-config-dsaas
    name: "kube-config-dsaas-stg"
    secret-path: 'app-sre/creds/kube-configs/app-sre-prod-03'
    secret-values:
      - env-var: 'KUBE_SERVER'
        vault-key: 'server'
      - env-var: 'KUBE_TOKEN'
        vault-key: 'token'

- registry-devshift-credentials: &registry-devshift-credentials
    name: "registry-devshift-credentials"
    secret-path: 'app-sre/cico/registry-devshift-credentials'
    secret-values:
      - env-var: 'DEVSHIFT_USERNAME'
        vault-key: 'devshift_username'
      - env-var: 'DEVSHIFT_PASSWORD'
        vault-key: 'devshift_password'

- quay-credentials: &quay-credentials
    name: "quay-credentials"
    secret-path: 'app-sre/cico/quay-credentials'
    secret-values:
      - env-var: 'QUAY_USERNAME'
        vault-key: 'quay_username'
      - env-var: 'QUAY_PASSWORD'
        vault-key: 'quay_password'

- recommender-api-token: &recommender-api-token
    name: "recommender-api-token"
    secret-path: 'devtools-osio-ci/recommender-api-token'
    secret-values:
      - env-var: 'RECOMMENDER_API_TOKEN'
        vault-key: 'token'

- registered-user-uuid: &registered-user-uuid
    name: "registered-user-uuid"
    secret-path: 'devtools-osio-ci/registered-user-uuid'
    secret-values:
      - env-var: 'REGISTERED_USER_UUID'
        vault-key: 'uuid'

- snyk_api_token: &snyk_api_token
    name: "snyk-api-token"
    secret-path: 'devtools-osio-ci/snyk_api_token'
    secret-values:
      - env-var: 'SNYK_TOKEN'
        vault-key: 'token'

- 3scale-user-key: &3scale-user-key
    name: "3scale-user-key"
    secret-path: 'devtools-osio-ci/3scale-user-key'
    secret-values:
      - env-var: 'THREE_SCALE_PREVIEW_USER_KEY'
        vault-key: 'user_key'

- recommender-refresh-token: &recommender-refresh-token
    name: "recommender-refresh-token"
    secret-path: 'devtools-osio-ci/recommender-refresh-token'
    secret-values:
      - env-var: 'RECOMMENDER_REFRESH_TOKEN'
        vault-key: 'token'

- recommender-api-token-prod: &recommender-api-token-prod
    name: "recommender-api-token-prod"
    secret-path: 'devtools-osio-ci/recommender-api-token-prod'
    secret-values:
      - env-var: 'RECOMMENDER_API_TOKEN'
        vault-key: 'token'

- job_template_defaults: &job_template_defaults
    name: 'job_template_defaults'
    description: |
      {jobdescription}
    node: "{ci_project}"
    concurrent: true
    beforeGetNode: ""
    properties:
        - github:
            url: https://github.com/{git_organization}/{git_repo}/
        - build-discarder:
            days-to-keep: '{discarder_days}'
            num-to-keep: '{discarder_num}'
    scm:
        - git-scm:
            git_url: https://{github_user}@github.com/{git_organization}/{git_repo}.git
            git_basedir: ''
    triggers:
        - githubprb:
            github_hooks: '{github_hooks}'
    builders:
        - shell: |
            # testing out the cico client
            set +e
            {beforeGetNode}
            cp ~/artifacts.key .
            export CICO_API_KEY=$(cat ~/duffy.key )
            # get node
            n=1
            while true
            do
                cico_output=$(cico node get -f value -c ip_address -c comment)
                if [ $? -eq 0 ]; then
                    read CICO_hostname CICO_ssid <<< $cico_output
                    if  [ ! -z "$CICO_hostname" ]; then
                        # we got hostname from cico
                        break
                    fi
                    echo "'cico node get' succeed, but can't get hostname from output"
                fi
                if [ $n -gt 15 ]; then
                    # give up after 15 tries
                    echo "giving up on 'cico node get'"
                    exit 1
                fi
                echo "'cico node get' failed, trying again in 60s ($n/15)"
                n=$[$n+1]
                sleep 60
            done
            sshopts="-t -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root"
            ssh_cmd="ssh $sshopts $CICO_hostname"

            cp ~/cico-tools/env-toolkit .
            ./env-toolkit dump -f jenkins-env.json
            env > jenkins-env

            $ssh_cmd yum -y install rsync
            if [ -n "${{ghprbTargetBranch}}" ]; then
                git rebase --preserve-merges origin/${{ghprbTargetBranch}}
                rtn_code=$?
                if [ $rtn_code -ne 0 ]; then
                    echo "The branch can not be rebased onto origin/${{ghprbTargetBranch}}."
                    exit $rtn_code
                fi
            else
                echo "Not a PR build, using master"
            fi
            rsync -e "ssh $sshopts" -Ha $(pwd)/ $CICO_hostname:payload \
            && /usr/bin/timeout {timeout} $ssh_cmd -t "cd payload && {ci_cmd}"
            rtn_code=$?
            if [ $rtn_code -eq 0 ]; then
                cico node done $CICO_ssid
            else
                if [[ $rtn_code -eq 124 ]]; then
                   echo "BUILD TIMEOUT";
                   cico node done $CICO_ssid
                else
                    # fail mode gives us 12 hrs to debug the machine
                    curl "http://admin.ci.centos.org:8080/Node/fail?key=$CICO_API_KEY&ssid=$CICO_ssid"
                fi
            fi
            exit $rtn_code

- job-template:
    name: '{ci_project}-{git_repo}'
    wrappers:
      - ansicolor
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *quay-credentials
            - *registry-devshift-credentials
    <<: *job_template_defaults

- job-template:
    name: '{ci_project}-{git_repo}-fabric8-analytics'
    disabled: '{obj:disabled}'
    registry: 'MISSING_REGISTRY_NAME'
    image_name: 'MISSING_IMAGE_NAME'
    wrappers:
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *quay-credentials
            - *registry-devshift-credentials
      - ansicolor
    triggers:
      - github-pull-request:
          status-context: "ci.centos.org PR build (fabric8-analytics)"
          org-list:
            - fabric8-analytics
            - kubesecurity
          success-comment: "$ghprbPullAuthorLoginMention Your image is available in the registry: `docker pull {registry}/{image_name}:SNAPSHOT-PR-$ghprbPullId`"
          <<: *github_pull_request_defaults
    publishers:
        - email:
            recipients: msawood@redhat.com
            notify-every-unstable-build: true
            send-to-individuals: true
    <<: *job_template_defaults

- job-template: &job_template_build_defaults
    name: 'job_template_build_defaults'
    subdir: ''
    description: |
      {jobdescription}
    node: "{ci_project}"
    properties:
        - github:
            url: https://github.com/{git_organization}/{git_repo}/
    scm:
        - git:
            url: https://github.com/{git_organization}/{git_repo}.git
            shallow_clone: true
            branches:
                - '{branch}'
    triggers:
        - github
    svc_name: none
    prj_name: dsaas-preview
    saas_git: none
    saas_service_name: none
    saasherder_prepare: |
        if [ "$SAAS_GIT" != "none" ]; then
            SAAS_ENV=staging
            PATH=~/bin/:$PATH:~/.local/bin/
            CONTEXT=$(echo $SAAS_GIT | sed 's/.*://')
            SAAS_GIT=$(echo $SAAS_GIT | sed 's/:.*//')
            SAASHERDER_OBJECT_WHITELIST=Deployment,DeploymentConfig,Service,ConfigMap,Role,RoleBinding,ServiceAccount,CronJob,StatefulSet
            if [[ -z "$SAAS_SERVICE_NAME" || "$SAAS_SERVICE_NAME" == "none" ]]; then
                SAAS_SERVICE_NAME=$GIT_REPO
            fi
            if [ "$SUBDIR" != "" ]; then
                SAAS_SERVICE_NAME=$SAAS_SERVICE_NAME"-"$SUBDIR
            fi
            git clone --depth 1 https://github.com/openshiftio/$SAAS_GIT saas.git
            cd saas.git
            [ "$CONTEXT" != "$SAAS_GIT" ] && saasherder --context $CONTEXT config get-contexts > /dev/null
            export DEVSHIFT_TAG_LEN=$(saasherder --environment $SAAS_ENV get hash_length $SAAS_SERVICE_NAME)
            cd ..
        fi
    saasherder_deploy: |
        if [ "$SVC_NAME" != "none" ]; then
            oc --server="$KUBE_SERVER" --token="$KUBE_TOKEN" rollout latest $SVC_NAME -n $PRJ_NAME
            rtn_code=$?
        fi
        if [ "$SAAS_GIT" != "none" ]; then
            cd saas.git
            saasherder --environment $SAAS_ENV update hash $SAAS_SERVICE_NAME $GIT_COMMIT
            saasherder --environment $SAAS_ENV pull $SAAS_SERVICE_NAME
            saasherder --environment $SAAS_ENV template --filter Route --output-dir $GIT_REPO-processed tag $SAAS_SERVICE_NAME
            saasherder --environment $SAAS_ENV label --output-dir $GIT_REPO-processed --saas-repo-url $SAAS_GIT $SAAS_SERVICE_NAME > label_selector
            oc --server="$KUBE_SERVER" --token="$KUBE_TOKEN" apply -f $GIT_REPO-processed/$SAAS_SERVICE_NAME.yaml -n $PRJ_NAME
            rtn_code=$?
            if [ $rtn_code -ne 0 ]; then
                echo "error during oc apply"
                exit $rtn_code
            fi
            label_selector=$(cat label_selector)
            resources_to_delete=$(oc --server="$KUBE_SERVER" --token="$KUBE_TOKEN" get $SAASHERDER_OBJECT_WHITELIST -o name -l "$label_selector" -n $PRJ_NAME)
            for r in $resources_to_delete; do
                oc --server="$KUBE_SERVER" --token="$KUBE_TOKEN" -n $PRJ_NAME delete $r
            done
            cd ..
        fi
    extra_target: ""
    builders:
        - shell: |
            # testing out the cico client
            set +e

            export CICO_API_KEY=$(cat ~/duffy.key )
            get_cico_node() {{
                # get node
                n=1
                while true
                do
                    cico_output=$(cico node get -f value -c ip_address -c comment)
                    if [ $? -eq 0 ]; then
                        read CICO_hostname CICO_ssid <<< $cico_output
                        if  [ ! -z "$CICO_hostname" ]; then
                            # we got hostname from cico
                            break
                        fi
                        echo "'cico node get' succeed, but can't get hostname from output" >&2
                    fi
                    if [ $n -gt 15 ]; then
                        # give up after 15 tries
                        echo "giving up on 'cico node get'" >&2
                        return 1
                    fi
                    echo "'cico node get' failed, trying again in 60s ($n/15)" >&2
                    n=$[$n+1]
                    sleep 60
                done
                echo "$CICO_hostname" "$CICO_ssid"
            }}

            # Verify Job configuration

            if [ "{svc_name}" == "none" -a "{saas_git}" == "none" ]; then
                echo "Not part of SAAS"
            else
                #Prepare values for deployment
                SVC_NAME={svc_name}
                SUBDIR="{subdir}"
                GIT_REPO={git_repo}
                PRJ_NAME={prj_name}
                SAAS_GIT={saas_git}
                {saasherder_prepare}
            fi

            if [ -z "$DEVSHIFT_TAG_LEN" ]; then
                export DEVSHIFT_TAG_LEN=7
            fi

            sshopts="-t -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root"

            cp ~/cico-tools/env-toolkit .
            ./env-toolkit dump -f jenkins-env.json
            env > jenkins-env

            # CentOS build

            cico_node_output=$(get_cico_node)
            [ "$?" != "0" ] && exit 1

            read CICO_hostname CICO_ssid <<< $cico_node_output

            ssh_cmd="ssh $sshopts $CICO_hostname"

            $ssh_cmd yum -y install rsync
            rsync -e "ssh $sshopts" -Ha $(pwd)/ $CICO_hostname:payload
            $ssh_cmd -t "cd payload && {ci_cmd}"
            rtn_code=$?

            if [ "$rtn_code" != "0" ]; then
              curl "http://admin.ci.centos.org:8080/Node/fail?key=$CICO_API_KEY&ssid=$CICO_ssid"
              exit $rtn_code
            fi

            # RHEL build

            if [ -n "{extra_target}" ]; then
                $ssh_cmd -t "cd payload && TARGET=\"{extra_target}\" {ci_cmd}"
                rtn_code=$?

                if [ "$rtn_code" != "0" ]; then
                    curl "http://admin.ci.centos.org:8080/Node/fail?key=$CICO_API_KEY&ssid=$CICO_ssid"
                    exit $rtn_code
                fi
            fi

            #Deploy preview
            # Verify Job configuration
            if [ "{svc_name}" == "none" -a "{saas_git}" == "none" ]; then
                echo "Not part of SAAS, skipping deployment"
            else
                {saasherder_deploy}
            fi

            exit $rtn_code

- job-template:
    name: '{ci_project}-{git_repo}-f8a-build-{branch}'
    disabled: '{obj:disabled}'
    wrappers:
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *kube-config-dsaas-stg
            - *quay-credentials
            - *registry-devshift-credentials
            - *recommender-api-token-prod
      - ansicolor
    scm:
        - git:
            url: https://github.com/{git_organization}/{git_repo}.git
            shallow_clone: true
            branches:
                - master
    skip_deploy: 0
    run_e2e : '0'
    deployment_units: ''
    deployment_configs: ''
    extra_target: ''
    builders:
        - shell: |
            # testing out the cico client
            set +e
            set +x
            export CICO_API_KEY=$(cat ~/duffy.key )
            # get node
            n=1
            while true
            do
                cico_output=$(cico node get -f value -c ip_address -c comment)
                if [ $? -eq 0 ]; then
                    read CICO_hostname CICO_ssid <<< $cico_output
                    if  [ ! -z "$CICO_hostname" ]; then
                        # we got hostname from cico
                        break
                    fi
                    echo "'cico node get' succeed, but can't get hostname from output"
                fi
                if [ $n -gt 15 ]; then
                    # give up after 15 tries
                    echo "giving up on 'cico node get'"
                    exit 1
                fi
                echo "'cico node get' failed, trying again in 60s ($n/15)"
                n=$[$n+1]
                sleep 60
            done
            echo 'Using Host' $CICO_hostname

            export DEVSHIFT_TAG_LEN=7

            (
                # run in subshell not to affect current environment
                set +x

                # load creds_config_file
                eval "$(sed '/^\s*$/d;s/^/export /' $creds_config_file)"

                cp ~/cico-tools/env-toolkit .
                ./env-toolkit dump -f jenkins-env.json
                env > jenkins-env
            )

            set -x

            sshopts="-t -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root"
            ssh_cmd="ssh $sshopts $CICO_hostname"
            $ssh_cmd yum -y install rsync
            rsync -e "ssh $sshopts" -Ha $(pwd)/ $CICO_hostname:payload
            $ssh_cmd -t "cd payload && {ci_cmd}"
            rtn_code=$?

            # RHEL build
            if [[ $rtn_code -eq 0 && -n "{extra_target}" ]]; then
                $ssh_cmd -t "cd payload && TARGET=\"{extra_target}\" {ci_cmd}"
                rtn_code=$?
            fi

            # We want to reuse the node for running E2E tests,
            # but only if we are not doomed already.
            if [[ $rtn_code -ne 0 || {skip_deploy} -ne 0 ]]; then
                cico node done $CICO_ssid
            fi

            # Dump params for deploy-e2e-test-params
            cat > deploy-e2e-test-params << EOF
            GIT_ORGANIZATION={git_organization}
            UPSTREAM_GIT_COMMIT=$GIT_COMMIT
            SAAS_GIT={saas_git}
            DEPLOYMENT_UNITS={deployment_units}
            DEPLOYMENT_CONFIGS={deployment_configs}
            CICO_HOSTNAME=$CICO_hostname
            CICO_SSID=$CICO_ssid
            RUN_E2E={run_e2e}
            EOF

            exit $rtn_code
        - conditional-step:
            condition-kind: shell
            condition-command: |
                [[ {skip_deploy} -eq 0 ]] && exit 0 || exit 1
            steps:
                - trigger-builds:
                    - project:
                        - "devtools-f8a-master-deploy-e2e-test"
                      property-file: deploy-e2e-test-params
                      block: true
    <<: *job_template_build_defaults

- job-template:
    name: '{ci_project}-f8a-{branch}-deploy-e2e-test'
    disabled: '{obj:disabled}'
    publishers:
        - email:
            recipients: msawood@redhat.com rh-depanalytics@redhat.com 
            notify-every-unstable-build: true
            send-to-individuals: true
    wrappers:
        - vault-secrets:
            <<: *vault_defaults
            secrets:
              - *kube-config-dsaas-stg
              - *recommender-api-token
              - *3scale-user-key
              - *recommender-refresh-token
              - *registered-user-uuid
              - *snyk_api_token
        - ansicolor
    concurrent: false
    parameters:
      - string:
          name: GIT_ORGANIZATION
          default: fabric8-analytics
      - string:
          name: UPSTREAM_GIT_COMMIT
      - string:
          name: SAAS_GIT
          default: '{saas_git}'
      - string:
          name: PRJ_NAME
          default: '{prj_name}'
      - string:
          name: SVC_NAME
          default: none
      - string:
          name: DEPLOYMENT_UNITS
      - string:
          name: DEPLOYMENT_CONFIGS
      - string:
          name: CICO_HOSTNAME
      - string:
          name: CICO_SSID
      - string:
          name: BUILD_URL
      - string:
          name: RUN_E2E
          default: '0'
    scm:
        - git:
            url: https://github.com/{git_organization}/{git_repo}.git
            shallow_clone: true
            branches:
                - master
    builders:
        - shell: |
            # Verify Job configuration
            if [ "$SVC_NAME" == "none" -a "$SAAS_GIT" == "none" ]; then
                echo "require either svc_name or saas_git to be set"
                exit 1
            fi

            cp ~/cico-tools/env-toolkit .
            ./env-toolkit dump -f integration-tests/jenkins-env.json
            env > integration-tests/jenkins-env

            export GIT_COMMIT=$UPSTREAM_GIT_COMMIT

            # What's the current deployment revision?
            export DC_NAME=${{DEPLOYMENT_CONFIGS##* }}
            DC_REVISION=$(oc --server="$KUBE_SERVER" --token="$KUBE_TOKEN" get dc/$DC_NAME -n $PRJ_NAME |grep $DC_NAME | awk '{{ print $2 }}')
            if [ -z "$DC_REVISION" ]; then
                # First deployment
                DC_REVISION=0
            fi

            # Deploy
            {saasherder_prepare}
            export DEVSHIFT_TAG_LEN=7
            for DEPLOYMENT_UNIT in $DEPLOYMENT_UNITS; do
                export SAAS_SERVICE_NAME=$DEPLOYMENT_UNIT
                export GIT_REPO=$DEPLOYMENT_UNIT
                {saasherder_deploy}
            done

            export CICO_API_KEY=$(cat ~/duffy.key )
            # Register rollback routine
            gc() {{
                rtn_code=$?
                for DEPLOYMENT_CONFIG in $DEPLOYMENT_CONFIGS; do
                    if [ $rtn_code -ne 0 ]; then
                        # Failure, rollback
                        oc --server="$KUBE_SERVER" --token="$KUBE_TOKEN" rollback dc/$DEPLOYMENT_CONFIG -n $PRJ_NAME --to-version=$DC_REVISION || :
                    fi
                done
                cico node done $CICO_SSID || :
                exit $rtn_code
            }}
            trap gc EXIT SIGINT
            set -e

            # Wait for the new deployment to begin
            # First wait for OpenShift to register the new deployment
            for i in `seq 30`; do
                NEW_DC_REVISION=$(oc --server="$KUBE_SERVER" --token="$KUBE_TOKEN" get dc/$DC_NAME -n $PRJ_NAME |grep $DC_NAME | awk '{{ print $2 }}') || :
                if [ ${{NEW_DC_REVISION:-0}} -gt $DC_REVISION ]; then
                    echo "The new deployment has been created."
                    break
                fi
                echo "The new deployment hasn't been created yet."
                sleep 5
            done
            if [ ! ${{NEW_DC_REVISION:-0}} -gt $DC_REVISION ]; then
                exit 1
            fi

            # Wait for the new deployment to actually begin
            (
                for i in `seq 30`; do
                    export DEPLOY_POD_NAME=${{DC_NAME}}-${{NEW_DC_REVISION}}-deploy
                    DEPLOYMENT_STATE=$(oc --server="$KUBE_SERVER" --token="$KUBE_TOKEN" get pod/${{DEPLOY_POD_NAME}} -n $PRJ_NAME |grep ${{DEPLOY_POD_NAME}} |awk '{{ print $3 }}') || :
                    if [ ${{DEPLOYMENT_STATE:-Pending}} == "Running" ]; then
                        echo "The new deployment has started."
                        exit 0
                    fi
                    echo "The new deployment hasn't started yet."
                    sleep 5
                done; exit 1
            )
            # And finally wait for the new deployment to be ready
            oc --server="$KUBE_SERVER" --token="$KUBE_TOKEN" logs -f dc/$DC_NAME -n $PRJ_NAME

            # Now is the time to run E2E tests
            if [ $RUN_E2E -ne '0' ]; then
                sshopts="-t -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root"
                ssh_cmd="ssh $sshopts $CICO_HOSTNAME"
                rsync -e "ssh $sshopts" -Ha $(pwd)/ $CICO_HOSTNAME:payload-tests
                $ssh_cmd -t "cd payload-tests/integration-tests && /bin/bash cico_run_tests.sh"
            fi

    <<: *job_template_build_defaults

- wrapper:
    name: fabric8_launcher_credentials_wrapper
    wrappers:
        - credentials-binding:
            - text:
                credential-id: 061479ee-de4a-4fb0-b752-7b86659ba3ca
                variable: GENERATOR_DOCKER_HUB_PASSWORD
            - file:
                credential-id: f1d24e18-8f80-4284-9198-d44a713d17b4
                variable: FABRIC8_LAUNCHER_CREDENTIALS

- job-template:
    name: '{ci_project}-{git_repo}-generator-build-{branch}'
    scm:
        - git:
            url: https://github.com/{git_organization}/{git_repo}.git
            shallow_clone: true
            branches:
                - master
    wrappers:
      - vault-secrets:
          <<: *vault_defaults
          secrets:
            - *kube-config-dsaas-stg
            - *quay-credentials
            - *registry-devshift-credentials
      - fabric8_launcher_credentials_wrapper
    <<: *job_template_build_defaults

- job-template:
    name: '{ci_project}-{git_repo}-promote-to-prod'
    image_pattern: ''
    defaults: global
    node: devtools
    disabled: '{obj:disabled}'
     
    properties:
        - github:
            url: https://github.com/openshiftio/{git_repo}/
    scm:
        - git:
            url: https://github.com/openshiftio/{git_repo}.git
            shallow_clone: true
            branches:
                - master
    triggers:
        - github
    builders:
        - shell: |
            # testing out the cico client
            set +e

            export CICO_API_KEY=$(cat ~/duffy.key )

            # get node
            n=1
            while true
            do
                cico_output=$(cico node get -f value -c ip_address -c comment)
                if [ $? -eq 0 ]; then
                    read CICO_hostname CICO_ssid <<< $cico_output
                    if  [ ! -z "$CICO_hostname" ]; then
                        # we got hostname from cico
                        break
                    fi
                    echo "'cico node get' succeed, but can't get hostname from output"
                fi
                if [ $n -gt 15 ]; then
                    # give up after 15 tries
                    echo "giving up on 'cico node get'"
                    exit 1
                fi
                echo "'cico node get' failed, trying again in 60s ($n/15)"
                n=$[$n+1]
                sleep 60
            done

            sshopts="-t -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root"
            ssh_cmd="ssh $sshopts $CICO_hostname"

            if [ -n "${{ghprbTargetBranch}}" ]; then
                git rebase --preserve-merges origin/${{ghprbTargetBranch}}
                rtn_code=$?
                if [ $rtn_code -ne 0 ]; then
                    echo "The branch can not be rebased onto origin/${{ghprbTargetBranch}}."
                    exit $rtn_code
                fi
            else
                echo "Not a PR build, using master"
            fi


            $ssh_cmd -t "yum install -y docker && systemctl start docker"

            ENVIRONMENT=production PATH=~/bin/:$PATH:~/.local/bin DRY_RUN=true /bin/bash ~/saasherder/fetch_and_apply.sh
            CONTEXTS=$(PATH=~/bin/:$PATH:~/.local/bin saasherder config get-contexts)
            for c in `echo $CONTEXTS`; do
                DIR=$(readlink -f $c-20* | tail -1)
                for f in `ls $DIR`; do
                    python ~/saasherder/check_image.py $DIR/$f '{image_pattern}'
                    cat $DIR/$f | $ssh_cmd docker run --rm -i quay.io/app-sre/manifest-bouncer:{manifest_bouncer_tag} --warn-only -
                done
            done

            cico node done $CICO_ssid

            set -ex
            ENVIRONMENT=production PATH=~/bin/:$PATH:~/.local/bin /bin/bash ~/saasherder/fetch_and_apply.sh
