# Runs build_deploy.sh (polling if required) and deploys to staging
#
# vars required in the GitHub job definition:
# - gh_org: GitHub org
# - gh_repo: GitHub repo
#
# vars required in the GitLab job definition:
# - gl_group: GitLab group
# - gl_project: GitLab repo
#
# optional vars
# - quay_org: name of the quay organisation
#
# optional secrets:
# The secret 'app-sre/quay/{quay_org}-push' must exist, with `user`, `token` and `config.json` keys.
- job-template:
    id: 'gh-build-master'
    # SEARCHME: gh-build-master-job-suffix
    job_suffix: ''
    name: '{gh_org}-{gh_repo}-gh-build-{branch}{job_suffix}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *backup_ecr_push_creds
        - *quay_secret_push
        - *app_sre_bot_push_token
        - *app_interface_creds
        - *pypi
    <<: *gh_build_master

- job-template:
    id: 'gl-build-master'
    name: '{gl_group}-{gl_project}-gl-build-{branch}'
    wrappers:
      - timeout_wrapper:
          timeout: '{timeout}'
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *backup_ecr_push_creds
          - *quay_secret_push
          - *app_sre_bot_push_token
          - *app_interface_creds
    <<: *gl_build_master

# NOTE -- pipeline jobs currently unsupported (waiting for the openshift jenkins operator to be out of alpha)
- job-template:
    id: 'gl-pipeline-scm-trigger'
    name: '{gl_group}-{gl_project}-gl-pipeline-scm-trigger-{branch}'
    wrappers:
      - timeout_wrapper:
          timeout: '{timeout}'
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *backup_ecr_push_creds
          - *quay_secret_push
          - *app_sre_bot_push_token
          - *app_interface_creds
    <<: *gl_pipeline_scm_trigger

# NOTE -- pipeline jobs currently unsupported (waiting for the openshift jenkins operator to be out of alpha)
- job-template:
    id: 'gl-pipeline-timed'
    name: '{gl_group}-{gl_project}-gl-pipeline-timed-{branch}'
    wrappers:
      - timeout_wrapper:
          timeout: '{timeout}'
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *backup_ecr_push_creds
          - *quay_secret_push
          - *app_sre_bot_push_token
          - *app_interface_creds
    <<: *gl_pipeline_timed

- job-template:
    id: gh-build-master-with-upstream
    name: '{gh_org}-{gh_repo}-gh-build-{branch}-upstream-{upstream}'
    upstream: ''
    branch: master
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *quay_secret_push
        - *app_sre_bot_push_token
        - *app_interface_creds
    triggers:
    - reverse:
        jobs: '{upstream}'
        results: 'success'
    <<: *gh_build_master

- job-template:
    id: gl-build-master-with-upstream
    name: '{gl_group}-{gl_project}-gl-build-{branch}-upstream-{upstream}'
    upstream: ''
    branch: master
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *quay_secret_push
        - *app_sre_bot_push_token
        - *app_interface_creds
    triggers:
    - reverse:
        jobs: '{upstream}'
        results: 'success'
    <<: *gl_build_master

# PR check job
#
# vars required in the GitHub job definition:
# - gh_org: GitHub org
# - gh_repo: GitHub repo
#
# vars required in the GitLab job definition:
# - gl_group: GitLab group
# - gl_project: GitLab repo
#
# optional vars:
# - pr_check_script_path: the command to run. Defaults to `./pr_check.sh`

- job-template:
    id: 'gh-pr-check'
    name: '{gh_org}-{gh_repo}-gh-pr-check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *3scale_api
        - *app_interface_creds
        - *quay_secret_pull
    <<: *gh_pr_check

- job-template:
    id: 'gl-pr-check'
    name: '{gl_group}-{gl_project}-gl-pr-check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *3scale_api
        - *app_interface_creds
        - *gitlab_fork_compliance_reconcile_toml
        - *quay_secret_pull
    <<: *gl_pr_check


# Timed Job
#
# required vars:
# - cron_expression: cron expression
#
# vars required in the GitHub job definition:
# - gh_org: GitHub org
# - gh_repo: GitHub repo
#
# vars required in the GitLab job definition:
# - gl_group: GitLab group
# - gl_project: GitLab repo
#
# optional vars:
# - ci_cmd: the command to run. Defaults to `./run.sh`
- job-template:
    id: 'gh-timed'
    name: '{gh_org}-{gh_repo}-timed'
    <<: *gh_timed

- job-template:
    id: 'gl-timed'
    name: '{gl_group}-{gl_project}-timed'
    <<: *gl_timed

# Runs build_tag.sh (polling if required)
#
# vars required in the GitHub job definition:
# - gh_org: GitHub org
# - gh_repo: GitHub repo
- job-template:
    id: 'gh-build-tag'
    name: '{gh_org}-{gh_repo}-gh-build-tag'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *goreleaser
        - *pypi
    <<: *gh_build_tag

# Job templates for the openshift-saas-deploy + JJB integrations
# These templates should not be directly used.

# openshift-saas-deploy
# ---------------------
# parameters to be passed in job generation
# saas_file_name: name of saas file
# env_name: name opf environment
# app_name: name of application
# slack_channel: slack channel to send notifications to
- job-template:
    id: 'openshift-saas-deploy'
    name: 'openshift-saas-deploy-{saas_file_name}-{env_name}'
    node: app-interface
    label: '{app_name}'
    <<: *openshift_saas_deploy_template

# openshift-saas-deploy-with-upstream
# ---------------------
# parameters to be passed in job generation
# saas_file_name: name of saas file
# env_name: name opf environment
# app_name: name of application
# slack_channel: slack channel to send notifications to
# upstream: name of job to build after
- job-template:
    id: 'openshift-saas-deploy-with-upstream'
    name: 'openshift-saas-deploy-{saas_file_name}-{env_name}'
    node: app-interface
    label: '{app_name}'
    upstream: empty
    block-upstream: true
    triggers:
    - reverse:
        jobs: '{upstream}'
        results: 'success'
    <<: *openshift_saas_deploy_template

# Builds a bundle and catalog for OLM using opm
#
# vars required in the GitHub job definition:
# - gh_org: GitHub org
# - gh_repo: GitHub repo
#
# vars required in the GitLab job definition:
# - gl_group: GitLab group
# - gl_project: GitLab repo
#
# optional vars
# - quay_org: name of the quay organisation
#
# optional secrets:
# The secret 'app-sre/quay/{quay_org}-push' must exist, with `user`, `token` and `config.json` keys.
- job-template:
    id: 'gh-build-catalog-master'
    name: '{gh_org}-{gh_repo}-gh-build-catalog-{branch}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *backup_ecr_push_creds
        - *quay_secret_push
        - *app_sre_bot_push_token
        - *app_interface_creds
    <<: *gh_build_olm_catalog

- job-template:
    id: 'gl-build-catalog-master'
    name: '{gl_group}-{gl_project}-gl-build-catalog-{branch}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *backup_ecr_push_creds
        - *quay_secret_push
        - *app_sre_bot_push_token
        - *app_interface_creds
    <<: *gl_build_olm_catalog

- job-template:
    id: gh-build-catalog-master-with-upstream
    name: '{gh_org}-{gh_repo}-gh-build-catalog-{branch}-upstream-{upstream}'
    upstream: ''
    branch: master
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *quay_secret_push
        - *app_sre_bot_push_token
        - *app_interface_creds
    triggers:
    - reverse:
        jobs: '{upstream}'
        results: 'success'
    <<: *gh_build_olm_catalog

- job-template:
    id: gl-build-catalog-master-with-upstream
    name: '{gl_group}-{gl_project}-gl-build-catalog-{branch}-upstream-{upstream}'
    upstream: ''
    branch: master
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *quay_secret_push
        - *app_sre_bot_push_token
        - *app_interface_creds
    triggers:
    - reverse:
        jobs: '{upstream}'
        results: 'success'
    <<: *gl_build_olm_catalog

- job-template:
    id: 'gl-build-tag'
    name: '{gl_group}-{gl_project}-gl-build-tag'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *goreleaser_gitlab
        - *pypi
    <<: *gl_build_tag

- job-template:
    id: 'jenkins-node-rhel7-check'
    name: 'jenkins-node-rhel7-check'
    node: '{node}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    cron_expression: H */2 * * *
    builders:
    - shell: |
        if  podman image exists rhel-subscription-check ; then
            podman image rm rhel-subscription-check
        fi
        cat > Dockerfile << EOF
        FROM registry.access.redhat.com/rhel7
        RUN yum install -y git
        EOF
        podman build . -t rhel-subscription-check
    <<: *timed_template

- job-template:
    id: 'jenkins-node-rhel8-check'
    name: 'jenkins-node-rhel8-check'
    node: '{node}'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    cron_expression: H */2 * * *
    builders:
    - shell: |
        if  podman image exists rhel-subscription-check ; then
            podman image rm rhel-subscription-check
        fi
        cat > Dockerfile << EOF
        FROM registry.access.redhat.com/rhel7
        RUN yum install -y git
        EOF
        podman build . -t rhel-subscription-check
    <<: *timed_template
