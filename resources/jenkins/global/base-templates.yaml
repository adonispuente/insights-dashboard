- base_templates:
    name: base-templates

    build_deploy: &build_deploy
        shell: |
            {build_deploy_script_path}

    build_catalog: &build_catalog
        shell: |
            BUNDLE_IMAGE={bundle_image} CATALOG_IMAGE={catalog_image} {build_catalog_script_path}

    abort_job_multibranch: &abort_job_multibranch
        system-groovy:
            command: |
                import hudson.model.Result
                import hudson.model.Run
                import hudson.model.Executor
                import jenkins.model.CauseOfInterruption

                // get the current branch name
                // source_branch_env_var_name is different in ci-int and ci-ext
                def currentBranchName = build.environment.get("{source_branch_env_var_name}")
                println "[DEBUG] CURRENT BRANCH NAME ${{currentBranchName}}"

                // https://javadoc.jenkins-ci.org/hudson/model/Run.html
                Run previousBuild = build.getPreviousBuildInProgress()
                def previousBuildCount = 0
                def maxPreviousBuildsCount = {max_previous_builds_count}
                while (previousBuild != null && previousBuildCount < maxPreviousBuildsCount) {{
                    if (previousBuild.isInProgress()) {{
                        println "[DEBUG] CHECKING BUILD ${{previousBuild.getId()}} (${{previousBuildCount}}/${{maxPreviousBuildsCount}})"
                        // https://javadoc.jenkins-ci.org/hudson/model/Executor.html
                        Executor exec = previousBuild.getExecutor()
                        // if exec is null it means the build is not running
                        // just safety even though we checked it before
                        if (exec != null) {{
                            def execBuild = exec.getCurrentExecutable()
                            def execBranchName = execBuild.environment.get("{source_branch_env_var_name}")
                            println "[DEBUG] CHECKING EXEC BRANCH NAME ${{execBranchName}}"
                            if (currentBranchName == execBranchName) {{
                                println "[DEBUG] ABORTING EXEC BRANCH NAME ${{execBranchName}}"
                                // prepare the cause of interruption
                                def cause = {{ "interrupted by build ${{build.getId()}}" as String }} as CauseOfInterruption 
                                exec.interrupt(Result.ABORTED, cause)
                                println "[DEBUG] ABORTED EXEC BRANCH NAME ${{execBranchName}}"
                            }}
                        }}
                    }}
                    previousBuild = previousBuild.getPreviousBuildInProgress()
                    previousBuildCount = previousBuildCount + 1
                }}

    pr_check: &pr_check
        shell: |
            {pr_check_script_path}

    stack_analysis: &stack_analysis
        shell: |
            if [ -z "{run_stack_analysis_path}" ]; then exit; fi
            tmp_dir=$(mktemp -d -t sa-XXXXXXXXXX)
            cp {run_stack_analysis_path} $tmp_dir
            docker run --rm -v $tmp_dir:/coreapi/repo -e API_GATEWAY_URL=$API_GATEWAY_URL -e API_GATEWAY_USER_KEY=$API_GATEWAY_USER_KEY quay.io/openshiftio/fabric8-analytics-stack-analyzer-image:latest
            cat $tmp_dir/response.json > response.json
            cat response.json

    build_master: &build_master_template
        disabled: '{disable}'
        backup_ecr_push_creds_account_region: 'none' # https://vault.devshift.net/ui/vault/secrets/app-sre/show/integrations-output/aws-ecr-image-pull-secrets/none/basic-auth
        build_deploy_script_path: './build_deploy.sh'
        wrappers:
        - timestamps
        - timeout_wrapper:
            timeout: '{timeout}'
        builders:
        - *build_deploy

    build_olm_catalog: &build_olm_catalog_template
        disabled: '{disable}'
        backup_ecr_push_creds_account_region: 'none' # https://vault.devshift.net/ui/vault/secrets/app-sre/show/integrations-output/aws-ecr-image-pull-secrets/none/basic-auth
        build_catalog_script_path: './build_catalog.sh'
        wrappers:
        - timestamps
        - timeout_wrapper:
            timeout: '{timeout}'
        builders:
        - *build_catalog

    pr_check_template: &pr_check_template
        disabled: '{disable}'
        node: '{node}'
        concurrent: '{concurrent_build}'
        pr_check_script_path: "./pr_check.sh"
        run_stack_analysis_path: ''
        max_previous_builds_count: 20
        wrappers:
        - timestamps
        - timeout_wrapper:
            timeout: '{timeout}'
        builders:
        - *pr_check
        - *stack_analysis

    timed_template: &timed_template
        disabled: '{disable}'
        ci_cmd: ./run.sh
        unstable_return: 80
        wrappers:
        - timestamps
        - timeout_wrapper:
            timeout: '{timeout}'
        builders:
        - shell:
            command: "{ci_cmd}"
            unstable-return: "{unstable_return}"
        triggers:
        - timed: |
            {cron_expression}

    build_tag_template: &build_tag_template
        disabled: '{disable}'
        build_tag_script_path: './build_tag.sh'
        wrappers:
        - timestamps
        - timeout_wrapper:
            timeout: '{timeout}'
        builders:
        - shell: |
            {build_tag_script_path}

    slack_notify: &slack_notify
        slack:
            room: '{slack_channel_notification}'
            notify-start: False
            notify-success: True
            notify-failure: True
            notify-repeated-failure: True

- base_templates:
    name: github-base-templates

    gh_properties: &gh_properties
        properties:
        - github:
            url: 'https://github.com/{gh_org}/{gh_repo}/'

    gh_checkout: &gh_checkout
        branch: "master"
        node: '{node}'
        <<: *gh_properties
        scm:
        - git:
            url: 'git@github.com:{gh_org}/{gh_repo}.git'
            credentials-id: '{github_ssh_credentials}'
            branches:
            - '{branch}'
            included-regions:
            - '{include_path}'

    gh_build_master: &gh_build_master
        <<: *gh_triggers # these are different on ci.int and ci.ext
        <<: *gh_checkout
        <<: *build_master_template

    gh_build_olm_catalog: &gh_build_olm_catalog
        <<: *gh_triggers # these are different on ci.int and ci.ext
        <<: *gh_checkout
        <<: *build_olm_catalog_template

    gh_pr_check: &gh_pr_check
        <<: *gh_properties
        branch: "master"
        scm:
        - git:
            url: 'git@github.com:{gh_org}/{gh_repo}.git'
            credentials-id: '{github_ssh_credentials}'
            skip-tag: true
            refspec: '+refs/pull/*:refs/remotes/origin/pr/*'
            branches:
            - '${{ghprbActualCommit}}'
            merge:
                remote: origin
                branch: '{branch}'
            git-config-name: "AppSRE"
            git-config-email: "sd-app-sre@redhat.com"
            included-regions:
            - '{include_path}'
        triggers:
          - github-pull-request:
              cron: '* * * * *'
              github-hooks: '{github_hooks}'
              permit-all: false
              trigger-phrase: '(?ms).*^(\[test\]|\/retest|\/lgtm|\/lgtm cancel|\/hold|\/hold cancel|\/ok-to-test)\s*$.*'
              org-list:
              - '{gh_org}'
              allow-whitelist-orgs-as-admins: true
              status-context: '{status_context}'
              white-list-target-branches:
              - '{white_list_target_branches}'
              cancel-builds-on-update: true
        <<: *pr_check_template

    gh_timed: &gh_timed
        <<: *timed_template
        <<: *gh_checkout

    gh_build_tag: &gh_build_tag
        branch: "refs/tags/*"
        <<: *gh_triggers # these are different on ci.int and ci.ext
        <<: *gh_checkout
        <<: *build_tag_template

- base_templates:
    name: gitlab-base-templates

    gl_properties: &gl_properties
        properties:
        - github:
            url: 'https://gitlab.cee.redhat.com/{gl_group}/{gl_project}/'
        - gitlab:
            connection: 'gitlab cee'

    gl_checkout: &gl_checkout
        branch: "master"
        node: '{node}'
        <<: *gl_properties
        scm:
        - git:
            url: 'git@gitlab.cee.redhat.com:{gl_group}/{gl_project}.git'
            credentials-id: '{gitlab_ssh_credentials}'
            shallow_clone: true
            branches:
            - '{branch}'
            included-regions:
            - '{include_path}'

    gl_triggers: &gl_triggers
        triggers:
        - gitlab:
            trigger-push: true
            trigger-merge-request: false
            trigger-open-merge-request-push: never
            add-note-merge-request: false
            add-ci-message: false
            set-build-description: true
            add-vote-merge-request: false
            trigger-note: false
            ci-skip: false
            wip-skip: false
            branch-filter-type: "NameBasedFilter"
            include-branches:
            - '{branch}'

    gl_build_master: &gl_build_master
        <<: *gl_triggers
        <<: *gl_checkout
        <<: *build_master_template

    gl_build_olm_catalog: &gl_build_olm_catalog
        <<: *gl_triggers
        <<: *gl_checkout
        <<: *build_olm_catalog_template

    gl_pr_check: &gl_pr_check
        <<: *gl_properties
        scm:
        - git:
            remotes:
            - 'origin':
                url: 'git@gitlab.cee.redhat.com:{gl_group}/{gl_project}.git'
                credentials-id: '{gitlab_ssh_credentials}'
                refspec: '+refs/heads/*:refs/remotes/origin/* +refs/merge-requests/${{gitlabMergeRequestIid}}/head:refs/remotes/origin/merge-requests/${{gitlabMergeRequestIid}}'
            branches:
            - 'merge-requests/${{gitlabMergeRequestIid}}'
            merge:
                remote: 'origin'
                branch: '${{gitlabTargetBranch}}'
            included-regions:
            - '{include_path}'
        triggers:
        - gitlab:
            trigger-push: true
            trigger-merge-request: true
            trigger-open-merge-request-push: source
            note-regex: '(?ms).*^(\[test\]|\/retest|\/lgtm|\/lgtm cancel|\/hold|\/hold cancel)\s*$.*'
            set-build-description: true
            add-note-merge-request: true
            add-vote-merge-request: true
            add-ci-message: true
            allow-all-branches: true
            ci-skip: true
            wip-skip: true
        publishers:
        - gitlab_message:
            <<: *gitlab_message_defaults
        - gitlab-notifier
        <<: *pr_check_template

    gl_timed: &gl_timed
        <<: *timed_template
        <<: *gl_checkout

    # This template is intended to create jobs that run the pipeline described
    # in the 'Jenkinsfile' of the project
    #
    # NOTE -- pipeline jobs currently unsupported (waiting for the openshift jenkins operator to be out of alpha)
    gl_pipeline_base: &gl_pipeline_base
        disabled: '{disable}'
        node: '{node}'
        concurrent: '{concurrent_build}'
        backup_ecr_push_creds_account_region: 'none' # https://vault.devshift.net/ui/vault/secrets/app-sre/show/integrations-output/aws-ecr-image-pull-secrets/none/basic-auth
        script_path: 'Jenkinsfile'
        project-type: pipeline
        pipeline-scm:
          scm:
          - git:
              url: 'git@gitlab.cee.redhat.com:{gl_group}/{gl_project}.git'
              credentials-id: '{gitlab_ssh_credentials}'
              shallow_clone: true
              clean: true
              branches:
              - '{branch}'
          script-path: '{script_path}'
        wrappers:
        - timestamps
        - timeout_wrapper:
            timeout: '{timeout}'
        <<: *gl_checkout

    # Run a pipeline by polling for SCM changes to 'branch'
    # NOTE -- pipeline jobs currently unsupported (waiting for the openshift jenkins operator to be out of alpha)
    gl_pipeline_scm_trigger: &gl_pipeline_scm_trigger
        triggers:
        - pollscm:
            cron: '* * * * *'
        <<: *gl_pipeline_base

    # Run a pipeline on a generic cron timer
    # NOTE -- pipeline jobs currently unsupported (waiting for the openshift jenkins operator to be out of alpha)
    gl_pipeline_timed: &gl_pipeline_timed
        triggers:
        - timed: |
            {cron_expression}
        <<: *gl_pipeline_base

    # This template is intended to dynamically create jobs that run the openshift-saas-deploy integration
    # parameters to be passed in job generation
    # saas_file_name: name of saas file
    # env_name: name opf environment
    # app_name: name of application
    # slack_channel: slack channel to send notifications to
    openshift_saas_deploy_template: &openshift_saas_deploy_template
        saas_file_name: empty
        env_name: empty
        app_name: empty
        slack_channel: empty
        slack_notify_start: False
        label: '{app_name}'
        wrappers:
        - timeout_wrapper:
            timeout: '{timeout}'
        - vault-secrets:
            <<: *vault_defaults
            secrets:
            - *reconcile_toml
            - *github_api
            - *app_interface_state
            - *gitlab_pr_submitter
        builders:
        - shell: |
            #!/bin/bash

            # Write config.toml for reconcile tools
            mkdir -p config
            echo "$CONFIG_TOML" | base64 -d > config/config.toml
            # Create directory for artifacts
            mkdir -p artifacts
            WORK_DIR=`pwd`

            set -x
            docker run --rm \
                -v $WORK_DIR/config:/config:z \
                -v $WORK_DIR/artifacts:/artifacts:z \
                -v /etc/pki:/etc/pki:z \
                -e REQUESTS_CA_BUNDLE=/etc/pki/tls/cert.pem \
                -e GITHUB_API=$GITHUB_API \
                -e APP_INTERFACE_STATE_BUCKET=$app_interface_state_bucket \
                -e APP_INTERFACE_STATE_BUCKET_ACCOUNT=$app_interface_state_bucket_account \
                -e gitlab_pr_submitter_queue_url=$gitlab_pr_submitter_queue_url \
                {qontract_reconcile_image} \
                qontract-reconcile --config /config/config.toml openshift-saas-deploy \
                --io-dir /artifacts \
                --saas-file-name {saas_file_name} \
                --env-name {env_name}
        publishers:
        - archive:
            artifacts: 'artifacts/**'
            allow-empty: 'true'
        - slack:
            room: '{slack_channel}'
            notify-start: '{slack_notify_start}'
            notify-success: True
            notify-failure: True
            notify-repeated-failure: True


    qontract_reconcile: &qontract_reconcile
        node: '{node}'
        concurrent: '{concurrent_build}'
        integrations: ''
        options: ''
        builders:
        - shell: |
            #!/bin/bash

            set -e -o pipefail -o errexit

            # Write config.toml for reconcile tools
            mkdir -p config
            echo "$CONFIG_TOML" | base64 -d > config/config.toml
            WORK_DIR=`pwd`

            set -x
            for integration in {integrations}; do
                docker run --rm \
                    -v $WORK_DIR/config:/config:z \
                    -v /etc/pki:/etc/pki:z \
                    -v /var/tmp/.cache:/root/.cache:z \
                    -e REQUESTS_CA_BUNDLE=/etc/pki/tls/cert.pem \
                    -e GITHUB_API=$GITHUB_API \
                    -e APP_INTERFACE_STATE_BUCKET=$app_interface_state_bucket \
                    -e APP_INTERFACE_STATE_BUCKET_ACCOUNT=$app_interface_state_bucket_account \
                    -e UNLEASH_API_URL=$UNLEASH_API_URL \
                    -e UNLEASH_CLIENT_ACCESS_TOKEN=$UNLEASH_CLIENT_ACCESS_TOKEN \
                    {qontract_reconcile_image} \
                    qontract-reconcile --config /config/config.toml $integration \
                    {options} &
                    pids+=($!)
            done
            
            for pid in "${{pids[@]}}"; do
                wait "$pid"
            done
