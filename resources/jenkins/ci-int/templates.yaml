# Runs build_deploy.sh and deploys to staging
#
# vars required in the job definition:
# - gl_group: GitLab group
# - gl_project: GitLab repo
#
# optional vars
# - kube_cluster: cluster name
# - kube_namespace: Namespace to deploy to
# - saasherder_context: saasherder context declared in config.yaml
# - saasherder_services: space separated list of saasherder service names
# - saas_git: saas herder repo uri, should be public
# - image_pattern: Regex of the image path to check against
# - quay_org: name of the quay organisation
#
# optional secrets:
# The secret 'app-sre/creds/kube-configs/{kube_cluster}' must exist.
# The secret 'app-sre/quay/{quay_org}-push' must exist, with `user`, `token` and `config.json` keys.
- job-template:
    id: 'gl-build-master'
    name: '{gl_group}-{gl_project}-gl-build-{branch}'
    wrappers:
      - timeout_wrapper:
          timeout: '{timeout}'
      - vault-secrets:
          <<: *vault_defaults
          secrets:
          - *kube_config
          - *quay_secret_push
          - *app_sre_bot_push_token
    <<: *gl_build_master_template

- job-template:
    id: 'gl-pr-check'
    name: '{gl_group}-{gl_project}-gl-pr-check'
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    <<: *gl_pr_check_template

- job-template:
    id: gl-build-master-with-upstream
    name: '{gl_group}-{gl_project}-gl-build-{branch}-upstream-{upstream}'
    branch: master
    upstream: ''
    wrappers:
    - timeout_wrapper:
        timeout: '{timeout}'
    - ansicolor
    - vault-secrets:
        <<: *vault_defaults
        secrets:
        - *kube_config
        - *quay_secret_push
        - *app_sre_bot_push_token
    triggers:
    - reverse:
        jobs: '{upstream}'
        results: 'success'
    <<: *gl_build_master_template

# Deploys all the services defined in the saas repo
#
# vars required in the job definition:
# - gl_group: GitLab group
# - gl_project: GitLab repo
# - kube_cluster: cluster name
# - kube_namespace: Namespace to deploy to
# - image_pattern: Regex of the image path to check against
# - quay_org: name of the quay organisation
#
# Required secrets:
# The secret 'app-sre/creds/kube-configs/{kube_cluster}' must exist.
# The secret 'app-sre/quay/{quay_org}-pull' must exist, with `user`, `token` and `config.json` keys.
- job-template:
    id: 'saas-deploy'
    name: '{gl_group}-{gl_project}-{saasherder_context}-saas-deploy'
    dry_run: "no"
    repo_url: 'https://gitlab.cee.redhat.com/{gl_group}/{gl_project}'
    <<: *gl_build_master_template
    <<: *saasherder

# PR check for saas repos
#
# vars required in the job definition:
# - gl_group: GitLab group
# - gl_project: GitLab repo
# - kube_cluster: cluster name
# - kube_namespace: Namespace to deploy to
# - image_pattern: Regex of the image path to check against
#
# Required secrets:
# The secret 'app-sre/creds/kube-configs/{kube_cluster}' must exist.
# The secret 'app-sre/quay/{quay_org}-pull' must exist, with `user`, `token` and `config.json` keys.
- job-template:
    id: 'saas-pr-check'
    name: '{gl_group}-{gl_project}-{saasherder_context}-saas-pr-check'
    dry_run: "yes"
    repo_url: 'https://gitlab.cee.redhat.com/{gl_group}/{gl_project}'
    <<: *gl_pr_check_template
    <<: *saasherder

# Timed Job
#
# required vars:
# - gl_group: GitLab group
# - gl_project: GitLab repo
# - cron_expression: cron expression
#
# optional vars:
# - ci_cmd: the command to run. Defaults to `./run.sh`
- job-template:
    id: 'gl-timed'
    name: '{gl_group}-{gl_project}-timed'
    <<: *gl_timed_template
