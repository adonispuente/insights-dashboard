---
$schema: /openshift/prometheus-rule-1.yml
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    prometheus: app-sre
    role: alert-rules
  name: rds-approved-versions-test
spec:
  groups:
  - name: rds-version-checks
    rules:
    # This alert will be for testing purposes only and will never actually trigger due to the dbinstance_identifier check.
    # When making changes be sure to:
    #
    # 1. Update the prometheus rule tests first
    # 2. Update the expr below and make sure that the tests still pass
    # 3. Update the expression in rds-approved-versions.prometheusrules.yaml.j2 - replacing the dbinstance_identifier value with the tfr.identifier variable
    #
    - alert: TEST-RDSCompliantEngineVersionCheck
      # This expression uses a regex that matches any engine_versions that don't match the approved versions documented here: https://gitlab.cee.redhat.com/service/app-interface#approved-rds-versions
      # There doesn't appear to be a way to do a string comparison or some other method that doesn't rely on a regex. We should rely on good tests to ensure that this regex isn't broken.
      # NOTE: Deprecated Major versions are part of this regex so that they don't match both this expression and the RDSDeprecatedMajorVersionCheck one
      expr: |
        last_over_time(aws_resources_exporter_rds_engineversion{dbinstance_identifier=~"TEST_.+",engine="postgres", engine_version!~"^11\\.16|11\\.17|11\\.18|11\\.19|11\\.20|11\\.21|11\\.22|12\\.11|12\\.12|12\\.13|12\\.14|12\\.15|12\\.16|12\\.17|13\\.7|13\\.8|13\\.9|13\\.10|13\\.11|13\\.12|13\\.13|14\\.3|14\\.4|14\\.5|14\\.6|14\\.7|14\\.8|14\\.9|14\\.10|15\\.1|15\\.2|15\\.3|15\\.5"}[1h]) or last_over_time(aws_resources_exporter_rds_engineversion{dbinstance_identifier=~"TEST_.+",engine="mysql", engine_version!~"5\\.7\\.3[3-9]|5\\.7\\.4[0-9]|8\\.0\\.2[3-9]|8\\.0\\.3[0-9]|8\\.0\\.4[0-9]"}[1h])
      for: 10m
      labels:
        service: app-sre-observability
        severity: info
