---
$schema: /app-interface/prometheus-rule-test-1.yml

rule_files:
  - /observability/prometheusrules/srs-service-registry-slos-availability-stage.prometheusrules.yaml

evaluation_interval: 1m

tests:
  # === All
  - interval: 1m
    input_series:
      # CurrentErrorRate * (t / WindowSize) = BurnRate * (1 - SLOGoal)
      # ErrorRate = BurnRate * (1 - SLOTarget) per the given time period
      # 0m  - 30m  all good
      # 30m - 60m  5% burn rate ~> 6 * (1 - 0.99) = 0.06 error rate ~> 60 per 1000 requests, which should be just below the alert threshold
      # 60m - 90m  10% burn rate ~> 2 * 6 * (1 - 0.99) = 0.12 error rate ~> 120 per 1000 requests, which should trigger the alert
      - series: 'haproxy_backend_http_responses_total{route="service-registry-bu98",exported_namespace="service-registry-stage",code="5xx"}'
        values: '0+0x30   0+60x30      1800+120x30'
      - series: 'haproxy_backend_http_responses_total{route="service-registry-bu98",exported_namespace="service-registry-stage",code="2xx"}'
        values: '0+1x30   30+940x30   28230+880x30'
    alert_rule_test:
      - eval_time: 30m
        alertname: SRSServiceRegistryAPIAll30mto6hErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 60m
        alertname: SRSServiceRegistryAPIAll30mto6hErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 90m
        alertname: SRSServiceRegistryAPIAll30mto6hErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPIAll30mto6hErrorBudgetBurn
              service: srs-service-registry
              route: service-registry-bu98
              exported_namespace: service-registry-stage
              severity: high
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 6h error budget burn for Service Registry API (all operations) (current value: 115.9m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  - interval: 1m
    input_series:
      # 0m   - 120m   all good
      # 120m - 240m  10% burn rate ~> 3 * (1 - 0.99) = 0.03 error rate ~> 30 per 1000 requests, which should be just below the alert threshold
      # 240m - 360m  20% burn rate ~> 2 * 3 * (1 - 0.99) = 0.06 error rate ~> 60 per 1000 requests, which should trigger the alert
      - series: 'haproxy_backend_http_responses_total{route="service-registry-bu98",exported_namespace="service-registry-stage",code="5xx"}'
        values: '0+0x120   0+30x120    3600+60x120'
      - series: 'haproxy_backend_http_responses_total{route="service-registry-bu98",exported_namespace="service-registry-stage",code="2xx"}'
        values: '0+1x120   120+970x120   116520+940x120'
    alert_rule_test:
      - eval_time: 120m
        alertname: SRSServiceRegistryAPIAll2hto1dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 240m
        alertname: SRSServiceRegistryAPIAll2hto1dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 360m
        alertname: SRSServiceRegistryAPIAll2hto1dErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPIAll2hto1dErrorBudgetBurn
              service: srs-service-registry
              route: service-registry-bu98
              exported_namespace: service-registry-stage
              severity: info
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 1d error budget burn for Service Registry API (all operations) (current value: 59.5m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  - interval: 1m
    input_series:
      # 0m   - 360m   all good
      # 360m - 720m   10% burn rate ~> 1 * (1 - 0.99) = 0.01 error rate ~> 10 per 1000 requests, which should be just below the alert threshold
      # 720m - 1080m  20% burn rate ~> 2 * 1 * (1 - 0.99) = 0.02 error rate ~> 20 per 1000 requests, which should trigger the alert
      - series: 'haproxy_backend_http_responses_total{route="service-registry-bu98",exported_namespace="service-registry-stage",code="5xx"}'
        values: '0+0x360   0+10x360    7200+20x360'
      - series: 'haproxy_backend_http_responses_total{route="service-registry-bu98",exported_namespace="service-registry-stage",code="2xx"}'
        values: '0+1x360   360+990x360   356760+980x360'
    alert_rule_test:
      - eval_time: 360m
        alertname: SRSServiceRegistryAPIAll6hto3dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 720m
        alertname: SRSServiceRegistryAPIAll6hto3dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 1080m
        alertname: SRSServiceRegistryAPIAll6hto3dErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPIAll6hto3dErrorBudgetBurn
              service: srs-service-registry
              route: service-registry-bu98
              exported_namespace: service-registry-stage
              severity: info
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 3d error budget burn for Service Registry API (all operations) (current value: 29.67m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  # === Read
  - interval: 1m
    input_series:
      # CurrentErrorRate * (t / WindowSize) = BurnRate * (1 - SLOGoal)
      # ErrorRate = BurnRate * (1 - SLOTarget) per the given time period
      # 0m  - 30m  all good
      # 30m - 60m  5% burn rate ~> 6 * (1 - 0.9995) = 0.003 error rate ~> 3 per 1000 requests, which should be just below the alert threshold
      # 60m - 90m  10% burn rate ~> 2 * 6 * (1 - 0.9995) = 0.006 error rate ~> 6 per 1000 requests, which should trigger the alert
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="5xx",method="GET",path="/not-search"}'
        values: '0+0x30   0+3x30      90+6x30'
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="2xx",method="GET",path="/not-search"}'
        values: '0+1x30   30+997x30   29940+994x30'
    alert_rule_test:
      - eval_time: 30m
        alertname: SRSServiceRegistryAPIRead30mto6hErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 60m
        alertname: SRSServiceRegistryAPIRead30mto6hErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 90m
        alertname: SRSServiceRegistryAPIRead30mto6hErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPIRead30mto6hErrorBudgetBurn
              service: srs-service-registry
              namespace: service-registry-stage
              job: apicurio-registry
              severity: high
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 6h error budget burn for Service Registry API (read operations) (current value: 5.793m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  - interval: 1m
    input_series:
      # 0m   - 120m   all good
      # 120m - 240m  10% burn rate ~> 3 * (1 - 0.9995) = 0.0015 error rate ~> 15 per 10000 requests, which should be just below the alert threshold
      # 240m - 360m  20% burn rate ~> 2 * 3 * (1 - 0.9995) = 0.003 error rate ~> 30 per 10000 requests, which should trigger the alert
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="5xx",method="GET",path="/not-search"}'
        values: '0+0x120   0+15x120    1800+30x120'
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="2xx",method="GET",path="/not-search"}'
        values: '0+1x120   120+9985x120   1198320+9970x120'
    alert_rule_test:
      - eval_time: 120m
        alertname: SRSServiceRegistryAPIRead2hto1dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 240m
        alertname: SRSServiceRegistryAPIRead2hto1dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 360m
        alertname: SRSServiceRegistryAPIRead2hto1dErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPIRead2hto1dErrorBudgetBurn
              service: srs-service-registry
              namespace: service-registry-stage
              job: apicurio-registry
              severity: info
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 1d error budget burn for Service Registry API (read operations) (current value: 2.975m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  - interval: 1m
    input_series:
      # 0m   - 360m   all good
      # 360m - 720m   10% burn rate ~> 1 * (1 - 0.9995) = 0.0005 error rate ~> 5 per 10000 requests, which should be just below the alert threshold
      # 720m - 1080m  20% burn rate ~> 2 * 1 * (1 - 0.9995) = 0.0010 error rate ~> 10 per 10000 requests, which should trigger the alert
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="5xx",method="GET",path="/not-search"}'
        values: '0+0x360   0+5x360    1800+10x360'
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="2xx",method="GET",path="/not-search"}'
        values: '0+1x360   360+9995x360   3608195+9990x360'
    alert_rule_test:
      - eval_time: 360m
        alertname: SRSServiceRegistryAPIRead6hto3dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 720m
        alertname: SRSServiceRegistryAPIRead6hto3dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 1080m
        alertname: SRSServiceRegistryAPIRead6hto3dErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPIRead6hto3dErrorBudgetBurn
              service: srs-service-registry
              namespace: service-registry-stage
              job: apicurio-registry
              severity: info
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 3d error budget burn for Service Registry API (read operations) (current value: 994.5u)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  # === Write
  - interval: 1m
    input_series:
      # CurrentErrorRate * (t / WindowSize) = BurnRate * (1 - SLOGoal)
      # ErrorRate = BurnRate * (1 - SLOTarget) per the given time period
      # 0m  - 30m  all good
      # 30m - 60m  5% burn rate ~> 6 * (1 - 0.99) = 0.06 error rate ~> 60 per 1000 requests, which should be just below the alert threshold
      # 60m - 90m  10% burn rate ~> 2 * 6 * (1 - 0.99) = 0.12 error rate ~> 120 per 1000 requests, which should trigger the alert
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="5xx",method="POST",path="/not-search"}'
        values: '0+0x30   0+60x30      1800+120x30'
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="2xx",method="POST",path="/not-search"}'
        values: '0+1x30   30+940x30   28230+880x30'
    alert_rule_test:
      - eval_time: 30m
        alertname: SRSServiceRegistryAPIWrite30mto6hErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 60m
        alertname: SRSServiceRegistryAPIWrite30mto6hErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 90m
        alertname: SRSServiceRegistryAPIWrite30mto6hErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPIWrite30mto6hErrorBudgetBurn
              service: srs-service-registry
              namespace: service-registry-stage
              job: apicurio-registry
              severity: high
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 6h error budget burn for Service Registry API (write operations) (current value: 115.9m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  - interval: 1m
    input_series:
      # 0m   - 120m   all good
      # 120m - 240m  10% burn rate ~> 3 * (1 - 0.99) = 0.03 error rate ~> 30 per 1000 requests, which should be just below the alert threshold
      # 240m - 360m  20% burn rate ~> 2 * 3 * (1 - 0.99) = 0.06 error rate ~> 60 per 1000 requests, which should trigger the alert
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="5xx",method="POST",path="/not-search"}'
        values: '0+0x120   0+30x120    3600+60x120'
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="2xx",method="POST",path="/not-search"}'
        values: '0+1x120   120+970x120   116520+940x120'
    alert_rule_test:
      - eval_time: 120m
        alertname: SRSServiceRegistryAPIWrite2hto1dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 240m
        alertname: SRSServiceRegistryAPIWrite2hto1dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 360m
        alertname: SRSServiceRegistryAPIWrite2hto1dErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPIWrite2hto1dErrorBudgetBurn
              service: srs-service-registry
              namespace: service-registry-stage
              job: apicurio-registry
              severity: info
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 1d error budget burn for Service Registry API (write operations) (current value: 59.5m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  - interval: 1m
    input_series:
      # 0m   - 360m   all good
      # 360m - 720m   10% burn rate ~> 1 * (1 - 0.99) = 0.01 error rate ~> 10 per 1000 requests, which should be just below the alert threshold
      # 720m - 1080m  20% burn rate ~> 2 * 1 * (1 - 0.99) = 0.02 error rate ~> 20 per 1000 requests, which should trigger the alert
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="5xx",method="POST",path="/not-search"}'
        values: '0+0x360   0+10x360    7200+20x360'
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="2xx",method="POST",path="/not-search"}'
        values: '0+1x360   360+990x360   356760+980x360'
    alert_rule_test:
      - eval_time: 360m
        alertname: SRSServiceRegistryAPIWrite6hto3dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 720m
        alertname: SRSServiceRegistryAPIWrite6hto3dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 1080m
        alertname: SRSServiceRegistryAPIWrite6hto3dErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPIWrite6hto3dErrorBudgetBurn
              service: srs-service-registry
              namespace: service-registry-stage
              job: apicurio-registry
              severity: info
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 3d error budget burn for Service Registry API (write operations) (current value: 29.67m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  # === Search
  - interval: 1m
    input_series:
      # CurrentErrorRate * (t / WindowSize) = BurnRate * (1 - SLOGoal)
      # ErrorRate = BurnRate * (1 - SLOTarget) per the given time period
      # 0m  - 30m  all good
      # 30m - 60m  5% burn rate ~> 6 * (1 - 0.99) = 0.06 error rate ~> 60 per 1000 requests, which should be just below the alert threshold
      # 60m - 90m  10% burn rate ~> 2 * 6 * (1 - 0.99) = 0.12 error rate ~> 120 per 1000 requests, which should trigger the alert
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="5xx",path="/search/nemo"}'
        values: '0+0x30   0+60x30      1800+120x30'
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="2xx",path="/search/nemo"}'
        values: '0+1x30   30+940x30   28230+880x30'
    alert_rule_test:
      - eval_time: 30m
        alertname: SRSServiceRegistryAPISearch30mto6hErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 60m
        alertname: SRSServiceRegistryAPISearch30mto6hErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 90m
        alertname: SRSServiceRegistryAPISearch30mto6hErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPISearch30mto6hErrorBudgetBurn
              service: srs-service-registry
              namespace: service-registry-stage
              job: apicurio-registry
              severity: high
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 6h error budget burn for Service Registry API (search operations) (current value: 115.9m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  - interval: 1m
    input_series:
      # 0m   - 120m   all good
      # 120m - 240m  10% burn rate ~> 3 * (1 - 0.99) = 0.03 error rate ~> 30 per 1000 requests, which should be just below the alert threshold
      # 240m - 360m  20% burn rate ~> 2 * 3 * (1 - 0.99) = 0.06 error rate ~> 60 per 1000 requests, which should trigger the alert
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="5xx",path="/search/nemo"}'
        values: '0+0x120   0+30x120    3600+60x120'
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="2xx",path="/search/nemo"}'
        values: '0+1x120   120+970x120   116520+940x120'
    alert_rule_test:
      - eval_time: 120m
        alertname: SRSServiceRegistryAPISearch2hto1dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 240m
        alertname: SRSServiceRegistryAPISearch2hto1dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 360m
        alertname: SRSServiceRegistryAPISearch2hto1dErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPISearch2hto1dErrorBudgetBurn
              service: srs-service-registry
              namespace: service-registry-stage
              job: apicurio-registry
              severity: info
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 1d error budget burn for Service Registry API (search operations) (current value: 59.5m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
  - interval: 1m
    input_series:
      # 0m   - 360m   all good
      # 360m - 720m   10% burn rate ~> 1 * (1 - 0.99) = 0.01 error rate ~> 10 per 1000 requests, which should be just below the alert threshold
      # 720m - 1080m  20% burn rate ~> 2 * 1 * (1 - 0.99) = 0.02 error rate ~> 20 per 1000 requests, which should trigger the alert
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="5xx",path="/search/nemo"}'
        values: '0+0x360   0+10x360    7200+20x360'
      - series: 'rest_requests_count_total{job="apicurio-registry",namespace="service-registry-stage",status_code_group="2xx",path="/search/nemo"}'
        values: '0+1x360   360+990x360   356760+980x360'
    alert_rule_test:
      - eval_time: 360m
        alertname: SRSServiceRegistryAPISearch6hto3dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 720m
        alertname: SRSServiceRegistryAPISearch6hto3dErrorBudgetBurn
        exp_alerts: [ ]
      - eval_time: 1080m
        alertname: SRSServiceRegistryAPISearch6hto3dErrorBudgetBurn
        exp_alerts:
          - exp_labels:
              alertname: SRSServiceRegistryAPISearch6hto3dErrorBudgetBurn
              service: srs-service-registry
              namespace: service-registry-stage
              job: apicurio-registry
              severity: info
            exp_annotations:
              dashboard: "https://grafana.stage.devshift.net/d/VRxU14jZ1/service-registry-data-plane-metrics?var-datasource=app-sre-stage-01-prometheus&var-namespace=service-registry-stage&var-routeName=service-registry-bu98-stage"
              message: "High 3d error budget burn for Service Registry API (search operations) (current value: 29.67m)"
              runbook: "https://gitlab.cee.redhat.com/service/app-interface/tree/master/docs/service-registry/sop#srs-service-registry-availability"
