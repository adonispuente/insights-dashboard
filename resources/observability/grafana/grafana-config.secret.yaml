apiVersion: v1
kind: Secret
metadata:
  name: grafana-config
  annotations:
    qontract.recycle: "true"
data:
  grafana.ini:
    {{% b64encode %}}
    [rbac]
    enabled = false
    [auth]
    disable_login_form = false
    disable_signout_menu = true
    [auth.basic]
    enabled = false
    [auth.generic_oauth]
    enabled = true
    name = Redhat-SSO
    allow_sign_up = true
    client_id = {{{ vault('app-interface/app-sre/{{ resource.namespace.name }}/grafana/redhat-idp-config', 'client_id', 1) }}}
    client_secret = {{{ vault('app-interface/app-sre/{{ resource.namespace.name }}/grafana/redhat-idp-config', 'client_secret', 1) }}}
    scopes = openid email profile offline_access
    email_attribute_path = email
    login_attribute_path = preferred_username
    name_attribute_path = name
    auth_url = {{{ vault('app-interface/app-sre/{{ resource.namespace.name }}/grafana/redhat-idp-config', 'oidc_url', 1) }}}/protocol/openid-connect/auth
    token_url = {{{ vault('app-interface/app-sre/{{ resource.namespace.name }}/grafana/redhat-idp-config', 'oidc_url', 1) }}}/protocol/openid-connect/token
    api_url = {{{ vault('app-interface/app-sre/{{ resource.namespace.name }}/grafana/redhat-idp-config', 'oidc_url', 1) }}}/protocol/openid-connect/userinfo
    [paths]
    data = /var/lib/grafana
    logs = /var/lib/grafana/logs
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    http_addr = 0.0.0.0
    http_port = 3000
    {{% if external_url %}}
    root_url = {{{ external_url }}}
    {{% endif %}}
    protocol = https
    cert_key = /etc/tls/private/tls.key
    cert_file = /etc/tls/private/tls.crt
    [users]
    viewers_can_edit = true
    auto_assign_org_role = {{{auto_assign_org_role}}}
    [metrics]
    enabled = true
    [alerting]
    enabled = false
    [dataproxy]
    timeout = 60
    [security]
    admin_user = {{{ vault('app-interface/app-sre/{{ resource.namespace.name }}/grafana/grafana-admin-user', 'user', 1) }}}
    admin_password = {{{ vault('app-interface/app-sre/{{ resource.namespace.name }}/grafana/grafana-admin-user', 'password', 1) }}}
    [database]
    type = postgres
    host = {{{ vault('app-sre/integrations-output/terraform-resources/{{ resource.namespace.cluster.name }}/{{ resource.namespace.name }}/grafana-db', 'db.host') }}}:{{{ vault('app-sre/integrations-output/terraform-resources/{{ resource.namespace.cluster.name }}/{{ resource.namespace.name }}/grafana-db', 'db.port') }}}
    name = {{{ vault('app-sre/integrations-output/terraform-resources/{{ resource.namespace.cluster.name }}/{{ resource.namespace.name }}/grafana-db', 'db.name') }}}
    user = {{{ vault('app-sre/integrations-output/terraform-resources/{{ resource.namespace.cluster.name }}/{{ resource.namespace.name }}/grafana-db', 'db.user') }}}
    password = {{{ vault('app-sre/integrations-output/terraform-resources/{{ resource.namespace.cluster.name }}/{{ resource.namespace.name }}/grafana-db', 'db.password') }}}
    {{% endb64encode %}}
